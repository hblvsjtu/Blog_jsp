<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"等线 Light";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@等线 Light";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
h1
	{mso-style-link:"标题 1 字符";
	margin-top:17.0pt;
	margin-right:0cm;
	margin-bottom:16.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:240%;
	page-break-after:avoid;
	font-size:22.0pt;
	font-family:"Times New Roman",serif;}
h2
	{mso-style-link:"标题 2 字符";
	margin-top:13.0pt;
	margin-right:0cm;
	margin-bottom:13.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:173%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"等线 Light";}
h3
	{mso-style-link:"标题 3 字符";
	margin-top:13.0pt;
	margin-right:0cm;
	margin-bottom:13.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:173%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Times New Roman",serif;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"页眉 字符";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:center;
	layout-grid-mode:char;
	border:none;
	padding:0cm;
	font-size:9.0pt;
	font-family:"Times New Roman",serif;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"页脚 字符";
	margin:0cm;
	margin-bottom:.0001pt;
	layout-grid-mode:char;
	font-size:9.0pt;
	font-family:"Times New Roman",serif;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"批注框文本 字符";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:9.0pt;
	font-family:"Times New Roman",serif;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
span.1
	{mso-style-name:"标题 1 字符";
	mso-style-link:"标题 1";
	font-family:"Times New Roman",serif;
	font-weight:bold;}
span.2
	{mso-style-name:"标题 2 字符";
	mso-style-link:"标题 2";
	font-family:"等线 Light";
	font-weight:bold;}
span.3
	{mso-style-name:"标题 3 字符";
	mso-style-link:"标题 3";
	font-family:"Times New Roman",serif;
	font-weight:bold;}
span.a
	{mso-style-name:"页眉 字符";
	mso-style-link:页眉;
	font-family:"Times New Roman",serif;}
span.a0
	{mso-style-name:"页脚 字符";
	mso-style-link:页脚;
	font-family:"Times New Roman",serif;}
span.a1
	{mso-style-name:"批注框文本 字符";
	mso-style-link:批注框文本;
	font-family:"Times New Roman",serif;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	layout-grid:16.3pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=ZH-CN style='text-justify-trim:punctuation'>

<div class=WordSection1 style='layout-grid:16.3pt'>

<h1><a name="OLE_LINK1"><span lang=EN-US>DesignPattern</span></a><span
style='font-family:宋体'>技术栈</span></h1>

<p class=MsoNormal><span style='font-family:宋体'>《武林外传》中有这么一段对话：</span></p>

<p class=MsoNormal><span style='font-family:宋体'>邢捕头：手中无刀，心中有刀；</span></p>

<p class=MsoNormal><span style='font-family:宋体'>老白：错了，最高境界是手中无刀，心中也无刀。</span></p>

<p class=MsoNormal><span style='font-family:宋体'>设计模式四巨头</span><span lang=EN-US>The
Gang of Four: Erich Gamma</span><span style='font-family:宋体'>、</span><span
lang=EN-US>Richard Helm</span><span style='font-family:宋体'>、</span><span
lang=EN-US>Ralph Johnson</span><span style='font-family:宋体'>、</span><span
lang=EN-US>John Vlissides</span><span style='font-family:宋体'>。</span> </p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:21.0pt;text-indent:-21.0pt'><span lang=EN-US>一、<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>六大设计原则</h2>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>1.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>单一职责原则</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>SRP</span><span style='font-family:宋体'>，</span><span lang=EN-US>Single
Responsible Principle</span><span style='font-family:宋体'>，定义是：</span><span
lang=EN-US>There should never be more than one reason for a class to change</span><span
style='font-family:宋体'>。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>RBAC</span><span style='font-family:宋体'>模型</span>
<span lang=EN-US>Role-Based Access Control</span><span style='font-family:宋体'>，基于角色的访问控制，通过分配和取消角色来完成用户权限的授予与取消。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>用户的信息需要抽取成一个</span><span lang=EN-US>BO</span><span
style='font-family:宋体'>，</span><span lang=EN-US>Business Object</span><span
style='font-family:宋体'>，行为抽取成</span><span lang=EN-US>Biz</span><span
style='font-family:宋体'>，</span><span lang=EN-US>Business Logic</span><span
style='font-family:宋体'>。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>影响：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>There is sometimes hard to see</span><span style='font-family:宋体'>，生搬硬套该原则会容易使得类的剧增，给维护带来很大的麻烦，而且过细的划分使得系统变得复杂。</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>1.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>里氏替换原则</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>LSP</span><span style='font-family:宋体'>，</span><span
lang=EN-US>Liskov Substitution Principle</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>定义一：</span><span lang=EN-US>If for
each object o1 of type S there is an object o2 of type T, the behavior of P is
unchanged when o1 is substituted for o2 then S is subtype of T.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>定义二：</span><span lang=EN-US>Functions
that use pointers or references to base classes must be able to use objects of
derived classes without knowing it.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>四层含义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>子类必须完全实现父类的方法。在类中调用其他类的时候必须使用父类或者接口，这样做前一个类就不必知道调用的类具体的子类是什么，如果不能使用父类或者接口，说明类的设计违反了</span><span
lang=EN-US>LSP</span><span style='font-family:宋体'>原则。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>子类可以有自己的个性；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>覆盖或者实现父类的方法时输入参数可以被放大（重载），若被缩小了，则在某些场合下调用子类时无法实现父类的方法。子类无法完全实现父类的方法则违反第一层含义，即违背</span><span
lang=EN-US>LSP</span><span style='font-family:宋体'>原则；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>覆盖或者实现父类的方法时输出结果可以被缩小（这是覆写的要求）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>最佳实践：</span></p>

<p class=MsoNormal><span style='font-family:宋体'>在实际开发过程中，应尽量避免子类的“个性”。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>1.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>依赖倒置原则</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>DIP</span><span style='font-family:宋体'>，</span><span
lang=EN-US>Dependence Inversion Principle</span><span style='font-family:宋体'>，定义：</span><span
lang=EN-US>High level modules should not depend upon low level modules. Both
should depend upon abstractions. Abstractions should not depend upon details.
Detail should depend upon abstraction.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>什么叫“倒置”，为什么不叫“正置”？原因是依赖正置指的是实实在在的实现类间的依赖，符合正常人的思维方式</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>依赖关系是通过实现接口或者抽象类，或者传入参数的方式产生的，更加精简的定义是“面向接口编程”――</span><span
lang=EN-US>ODD</span><span style='font-family:宋体'>（</span><span lang=EN-US>Object-oriented
Design</span><span style='font-family:宋体'>）；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>在业务场景中，“抽象不应该依赖细节”，即抽象类不应该依赖于实现类；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>在</span><span lang=EN-US>java</span><span
style='font-family:宋体'>中，只要定义变量就会有两种类型――表面类型和实际类型，前者是在定义的时候赋予的类型，后者是对象的类型。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>TDD Test-Driven Development</span><span
style='font-family:宋体'>，测试驱动开发就是依赖倒置最高级的应用，只要制定好接口或者抽象类就可以进行独立开发，单元测试也可以独立运行。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>依赖的三种写法</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>构造函数传递依赖对象，在构造函数中声明依赖对象，这种方式叫做构造函数注入</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>public class Driver(){</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt'><span lang=EN-US>private
ClassA classA;</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Driver(Class classA){</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt'><span lang=EN-US>this.classA=classA</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt'><span lang=EN-US>}</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>}</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Setter</span><span style='font-family:宋体'>方法传递依赖对象</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>接口声明依赖对象</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>最佳实践：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>每个类尽量都有接口和抽象类；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>变量的表面类型尽量是接口或者是抽象类；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>但是这个也不是绝对的，比如一个工具类</span><span lang=EN-US>XXXutils</span><span
style='font-family:宋体'>一般不需接口和抽象类的，还有，如果你使用的是类的</span><span lang=EN-US>clone</span><span
style='font-family:宋体'>方法，就必须要用实现类，这是</span><span lang=EN-US>JDK</span><span
style='font-family:宋体'>提供的一个规范；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>任何类都不应该从具体类中派生；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>尽量不要覆写基类的方法；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>5)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>结合里氏替换原则使用；</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>1.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>接口隔离原则</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Clients should not be forced to depend upon
interface that they don’t use.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>The dependency of one class to another one
should depend on the smallest possible interface. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>1.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>迪米特法则</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>LoD</span><span style='font-family:宋体'>，</span><span
lang=EN-US>Law of Demeter </span><span style='font-family:宋体'>也称最少知识原则，</span><span
lang=EN-US>only talk to your immediate friends.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>而朋友类的定义：出现在成员变量和成员方法中的输入输出参数的类，一个类最好只与它的朋友类进行通讯，否则，会破坏类的健壮性。方法是类的一个行为，类如果不知道与其他类产生依赖关系，这是不允许的</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>在</span><span lang=EN-US>java</span><span
style='font-family:宋体'>以及其他的面向对象设计模式中，类与类之间主要有</span><span lang=EN-US>6</span><span
style='font-family:宋体'>种关系，他们分别是：依赖、关联、聚合、组合、继承、实现。他们的耦合度依次增强。关联表现为类</span><span
lang=EN-US>A</span><span style='font-family:宋体'>为类</span><span lang=EN-US>B</span><span
style='font-family:宋体'>的成员变量，聚合关系中作为成员变量的类一般使用</span><span lang=EN-US>set</span><span
style='font-family:宋体'>方法赋值，组合关系中的成员变量一般会在构造方法中赋值；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>朋友间也不要太过亲密，即尽量不要对外公布太多的</span><span
lang=EN-US>public</span><span style='font-family:宋体'>方法和非静态的</span><span
lang=EN-US>public</span><span style='font-family:宋体'>方法，尽量多使用</span><span
lang=EN-US>private</span><span style='font-family:宋体'>，</span><span lang=EN-US>package-private</span><span
style='font-family:宋体'>和</span><span lang=EN-US>protected</span><span
style='font-family:宋体'>等访问权限。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>最佳实践：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>在实际应用中，如果一个类需要跳转两次才能访问到另一个类，就需要想办法重构了。为什么是两次呢？因为跳转的次数越多，系统越复杂，维护越困难，只要跳转的次数小于两次的还可以接受，当然了具体的问题需要具体分析。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>1.6<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>开闭原则</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Software entities like classes, modules and
functions should be open for extension but closed for modification.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="_Hlk501053255"><span lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>开闭原则</span></a><span
style='font-family:宋体'>告诉我们应尽量通过拓展软件实体的行为来实现变化，而不是通过修改已有的代码来完成变化，它是为软件实体的未来事件而制定的对先行开发进行约束的一个原则。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span><span lang=EN-US> </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>运维尽量减少对原有代码的修改，保持历史代码的纯洁性，提高系统的稳定性；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>开闭原则是最基础的一个原则，前面所讲的五个原则都是开闭原则的具体形态。</span></p>

<h2 style='margin-left:21.0pt;text-indent:-21.0pt'><span lang=EN-US>二、<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>创建类模式</h2>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>2.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>单例模式</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Single pattern</span><span style='font-family:
宋体'>，</span><span lang=EN-US>Ensure a class has only one instance, and provide
a global point of access to it</span><span style='font-family:宋体'>；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节代码：皇帝类</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>通过定义一个私有访问权限的构造函数，避免被其他类</span><span
lang=EN-US>new</span><span style='font-family:宋体'>出来一个对象，而</span><span
lang=EN-US>Emperor</span><span style='font-family:宋体'>他自己可以</span><span
lang=EN-US>new</span><span style='font-family:宋体'>一个静态对象出来，确保其他类对该类的访问都可以通过</span><span
lang=EN-US>getInstance</span><span style='font-family:宋体'>获得同一个对象。本实例又称为饿汉式单例。</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>public class Emperor{</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final Emperor emperor
= new Emperor();</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private Emperor(){</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:18.0pt'><span
lang=EN-US>}</span></p>

<p class=MsoListParagraph style='margin-left:69.0pt;text-indent:0cm'><span
lang=EN-US>public Emperor getInstance(){</span></p>

<p class=MsoListParagraph style='margin-left:69.0pt;text-indent:18.0pt'><span
lang=EN-US>return emperor;</span></p>

<p class=MsoListParagraph style='margin-left:69.0pt;text-indent:0cm'><span
lang=EN-US>} </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>}</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优势：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>减少内存的开销，特别是对于一个对象需要频繁的创建和销毁；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>减少系统的性能开销；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>避免对资源的多重占用，比如一个写文件的动作，由于只有一个实例存在的时候，避免对同一个资源文件的同时写的操作；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>相当于设置全局变量；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>劣势：</span></p>

<p class=MsoNormal><span style='font-family:宋体'>单例模式没有接口，很难拓展，若要拓展，除了修改代码没有别的办法，这就违反了开闭原则；</span></p>

<p class=MsoNormal><span style='font-family:宋体'>单例模式对测试是不利的，在并行开发环境中，如果单例模式没有完成，是不能进行测试的，没有接口也不能使用</span><span
lang=EN-US>mock</span><span style='font-family:宋体'>的方式虚拟一个对象；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>注意事项</span><span lang=EN-US>;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>线程不安全的实例，在高并发的情况下，</span><span
lang=EN-US>emperor new</span><span style='font-family:宋体'>的过程需要时间，当</span><span
lang=EN-US>emperor</span><span style='font-family:宋体'>还没有来得及</span><span
lang=EN-US>new</span><span style='font-family:宋体'>出来，另外一个线程进行了</span><span
lang=EN-US>emperor == null</span><span style='font-family:宋体'>的判断，所以有可能会出现两个</span><span
lang=EN-US>emperor</span><span style='font-family:宋体'>的出现。为了避免这种情况的出现，可以在</span><span
lang=EN-US>getInstance()</span><span style='font-family:宋体'>方法前添加</span><span
lang=EN-US>synchronized</span><span style='font-family:宋体'>关键字，也可以在方法内添加</span><span
lang=EN-US>synchronized</span><span style='font-family:宋体'>关键字，这种实例又称为懒汉式单例。</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>public class
Emperor{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; private
static final Emperor emperor = null;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; private
Emperor(){</span></p>

<p class=MsoNormal style='margin-left:48.0pt;text-indent:15.0pt'><span
lang=EN-US>}</span></p>

<p class=MsoNormal style='margin-left:60.0pt'><span lang=EN-US>public static
Emperor getInstance(){</span></p>

<p class=MsoNormal style='margin-left:72.0pt'><span lang=EN-US>if(emperor ==
null){</span></p>

<p class=MsoNormal style='margin-left:72.0pt;text-indent:12.0pt'><span
lang=EN-US>emperor=new Emperor();</span></p>

<p class=MsoNormal style='margin-left:72.0pt'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='margin-left:69.0pt;text-indent:3.0pt'><span
lang=EN-US>return emperor;</span></p>

<p class=MsoNormal style='margin-left:60.0pt'><span lang=EN-US>} </span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>}</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>2.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>工厂方法模式</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Define an interface for creating an object, but
let subclasses decide which class to instance. Factory Method lets a class
defer instantiation to subclasses.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>抽象产品类</span><span lang=EN-US>product</span><span
style='font-family:宋体'>负责定义产品的共性，实现对产品最抽象的定义，</span><span lang=EN-US>Creator</span><span
style='font-family:宋体'>为抽象创建类，也就是抽象工厂类，具体如何创建产品是由具体的实现工厂</span><span
lang=EN-US>ConcreteCenter</span><span style='font-family:宋体'>完成</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Class</span><span style='font-family:宋体'>对象的生成方式如下，在生成</span><span
lang=EN-US>Class</span><span style='font-family:宋体'>对象的时候，首先判断内存中是否已经加载，已加载的不再加载：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>类名</span><span lang=EN-US>.class&nbsp;
</span><span style='font-family:宋体'>说明：</span><span lang=EN-US> JVM</span><span
style='font-family:宋体'>将使用类装载器</span><span lang=EN-US>, </span><span
style='font-family:宋体'>将类装入内存</span><span lang=EN-US>(</span><span
style='font-family:宋体'>前提是</span><span lang=EN-US>:</span><span
style='font-family:宋体'>类还没有装入内存</span><span lang=EN-US>),</span><span
style='font-family:宋体'>不做类的初始化工作</span><span lang=EN-US>.</span><span
style='font-family:宋体'>返回</span><span lang=EN-US>Class</span><span
style='font-family:宋体'>的对象；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Class.forName(&quot;</span><span
style='font-family:宋体'>类名字符串</span><span lang=EN-US>&quot;)&nbsp; </span><span
style='font-family:宋体'>（注：类名字符串是包名</span><span lang=EN-US>+</span><span
style='font-family:宋体'>类名）</span><span lang=EN-US>&nbsp; </span><span
style='font-family:宋体'>说明：装入类</span><span lang=EN-US>,</span><span
style='font-family:宋体'>并做类的静态初始化，返回</span><span lang=EN-US>Class</span><span
style='font-family:宋体'>的对象；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>实例对象</span><span lang=EN-US>.getClass()&nbsp;
</span><span style='font-family:宋体'>说明：对类进行静态初始化、非静态初始化；返回引用运行时真正所指的对象</span><span
lang=EN-US>(</span><span style='font-family:宋体'>因为</span><span lang=EN-US>:</span><span
style='font-family:宋体'>子对象的引用可能会赋给父对象的引用变量中</span><span lang=EN-US>)</span><span
style='font-family:宋体'>所属的类的</span><span lang=EN-US>Class</span><span
style='font-family:宋体'>的对象；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>d)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>getName()</span><span style='font-family:宋体'>，以</span><span
lang=EN-US>String</span><span style='font-family:宋体'>形式返回次</span><span
lang=EN-US>Class</span><span style='font-family:宋体'>对象所表示的实体名称。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>具体的代码示例：</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>抽象产品类</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract class Product{</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>产品类的公共方法</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void method1(){</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>抽象方法</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract void method2();</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>具体产品类</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class ConcreteProduct1 extends Product {</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void method1(){</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>具体的业务处理</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void method2() {</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
TODO Auto-generated method stub</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class ConcreteProduct2 extends Product {</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void method1(){</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>具体的业务处理</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void method2() {</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
TODO Auto-generated method stub</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>抽象工厂：</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract class Centor{</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract &lt;T extends Product&gt; T createProduct(Class&lt;T&gt; c);</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>具体工厂：</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public&nbsp;
class ConcreteCentor extends Centor{</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @SuppressWarnings(&quot;unchecked&quot;)</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public&nbsp;
&lt;T extends Product&gt; T createProduct(Class&lt;T&gt; c) {</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Product
product=null;</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try
{</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; product=(Product)Class.forName(c.getName()).newInstance();</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
catch (Exception e) {</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
TODO: handle exception</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
(T)product; </span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>场景类</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Client{</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void main(String[] arg) {</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Centor
center=new ConcreteCentor();</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Product
product=center.createProduct(ConcreteProduct1.class);</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; product.method1();</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>有良好的封装性，只要知道类名即可创建，无需了解具体的创建过程，降低模块间的耦合；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>优秀的拓展性，在增加产品类的情况下，只要适当地修改具体工厂类或者拓展一个工厂类，就可以完成“拥抱变化”；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>屏蔽产品类，产品类如何变化，使用者都不需要关心，只需要关心产品接口即可，只要接口不变，系统的上层模块就不用变化，因为产品的实例化工作是由工厂完成的。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>使用场景：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>首先在使用</span><span lang=EN-US>new</span><span
style='font-family:宋体'>一个对象的场合都可以使用，区别在于</span><span lang=EN-US>new</span><span
style='font-family:宋体'>适用于具体类的创建和实现，而工厂方法适用于接口和抽象类的创建，是面向接口编程的首选。但是需要谨慎考虑是否增加一个工厂类进行管理，增加代码的复杂度。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>其次，当需要灵活和可拓展框架的时候也可以考虑。比如设计一个连接邮件服务器的模块的时候，定义一个接口如</span><span
lang=EN-US>IConnectMail</span><span style='font-family:宋体'>，有三种网络协议可供选择，如</span><span
lang=EN-US>POP3</span><span style='font-family:宋体'>，</span><span lang=EN-US>IMAP</span><span
style='font-family:宋体'>和</span><span lang=EN-US>HTTP</span><span
style='font-family:宋体'>，那么我们可以将此三种协议的实现看成是具体产品类。假如以后需要增加一个</span><span
lang=EN-US>webService</span><span style='font-family:宋体'>接口时，我们增加一个产品类即可。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>工厂模式的拓展：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>简单工厂类</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:宋体'>只有一个工厂类，此时可以把抽象工厂去掉，然后把具体工厂的成员方法变为静态即可。又叫静态工厂模式，缺点是方便拓展，不符合开闭原则。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>升级为多个工厂类，为每个产品添加一个具体工厂类；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>替代单例模式</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
style='font-family:宋体'>不知道是啥；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>延迟初始化</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:宋体'>不知道是啥；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>2.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>抽象工厂模式</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Abstract Factory Pattern</span><span
style='font-family:宋体'>，定义：</span><span lang=EN-US>Provide an interface for
creating families of related or dependent objects without specifying their
concrete classes.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>抽象工厂模式是工厂方法的升级版，相比工厂方法，在抽象工厂类的上层的抽象类编程一个接口，抽象类返回对象实例，但每次只返回一个。而接口每次则可以返回不同对象的实例。就好比女娲造人，工厂方法是指女娲造不同肤色的人。后来女娲发现原来人还有性别之分，不同肤色的人还需要分男女，此时需要添加一个造不同肤色人的接口，然后添加两个用于实现该接口的造男人和女人的具体工厂类。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>抽象工厂相当于生产多种产品族的方法，每个产品族内的产品相似，则可以把相似的产品抽取出来作为抽象工厂，然后具体工厂类负责生实现不同的产品族的生产。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>封装性</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:宋体'>每个产品的实现类不是高层模块要关心的，他关心的是接口，是抽象，是工厂类；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>产品族内的约束为非公开状态，该约束对于调用工厂类的高层模块来说是透明的，具体产品类的约束是在工厂内实现的。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>缺点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>最大的缺点在于产品族内产品的拓展是十分困难的，不仅要改抽象工厂类，还要改每个具体工厂类，不符合开闭原则。而且我们一直在强调抽象和接口是一个契约，改变契约，所有跟契约有关的代码都需要修改――这种代码又称为“有毒代码”。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>使用场景</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>一般用于具体相同约束的产品类。如不同操作系统上的图片编辑和文本编辑器。</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>2.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>模板方法模式</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Template Method Pattern&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Define
the skeleton of an algorithm in an operation, deferring some steps to
subclasses. Template Method lets subclasses redefine certain steps of an
algorithm without changing the algorithm’s structure.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>将子类完全相同的方法放在抽象类中</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>为了避免被恶意的操作，一般模板方法前面都加上</span><span
lang=EN-US>final</span><span style='font-family:宋体'>关键字，不允许被覆写，代码示例：</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>模板方法</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract class AbstractClass{</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>基本方法</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected
abstract void doSomething();</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected
abstract void doAnything();</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>模板方法</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void templateMethod() {</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.doSomething();</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.doAnything();</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span style='font-family:宋体'>模板方法中的基本方法尽量使用</span><span
lang=EN-US>protecte</span><span style='font-family:宋体'>类型，符合迪特米原则。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>提取公共代码，便于维护；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>行为由父类控制，子类实现；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>缺点</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>思维方式不符合抽象类定义一般方法，实现类定义具体方法的习惯。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>使用场景</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>多个子类有公共的方法；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>重要的复杂的算法，可以把核心算法设计为模板方法，周边的细节功能则由各个子类实现；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>拓展</span></p>

<p class=MsoNormal><span style='font-family:宋体'>钩子方法（</span><span lang=EN-US>Hook
Method</span><span style='font-family:宋体'>）</span> <span style='font-family:
宋体'>增加判断的方法用于调整模板方法执行的顺序</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>2.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>建造者模式</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK3"><span lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Builder Pattern </span></a><span
style='font-family:宋体'>也叫生成器模式</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:宋体'>定义：</span><span lang=EN-US>Separate the construction of
a complex object from its representation so that the same construction process
can create different representation.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>类图的使用。</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>加号（</span><span lang=EN-US>+</span><span
style='font-family:宋体'>）表示</span><span lang=EN-US>public</span><span
style='font-family:宋体'>；减号（</span><span lang=EN-US>-</span><span
style='font-family:宋体'>）表示</span><span lang=EN-US>private</span><span
style='font-family:宋体'>；井号</span><span lang=EN-US>(#)</span><span
style='font-family:宋体'>表示</span><span lang=EN-US>protected</span><span
style='font-family:宋体'>；省略这些修饰符表示具有</span><span lang=EN-US>package</span><span
style='font-family:宋体'>（包）级别的可见性。</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>如果属性或方法具有下划线，则说明它是静态的。</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>描述信息使用</span><span lang=EN-US> &lt;&lt;
</span><span style='font-family:宋体'>开头，使用</span><span lang=EN-US> &gt;&gt; </span><span
style='font-family:宋体'>结尾。</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>d)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>一般化关系：表示为类与类之间的继承关系，接口与接口之间的继承，类对接口的实现关系。用一个空心箭头</span><span
lang=EN-US>+</span><span style='font-family:宋体'>实线，箭头指向父类。或空心箭头</span><span
lang=EN-US>+</span><span style='font-family:宋体'>虚线，如果父类是接口。</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>e)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>关联关系：类与类之间的联接，它使一个类知道另一个类的属性和方法。用实线</span><span
lang=EN-US>+</span><span style='font-family:宋体'>箭头，</span> <span
style='font-family:宋体'>箭头指向被使用的类。</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>f)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>聚合关系：空心菱形</span><span lang=EN-US>+</span><span
style='font-family:宋体'>实线</span><span lang=EN-US>+</span><span
style='font-family:宋体'>箭头，箭头指向部分。</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>g)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>合成关系：实心菱形</span><span lang=EN-US>+</span><span
style='font-family:宋体'>实线</span><span lang=EN-US>+</span><span
style='font-family:宋体'>箭头，</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>h)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>依赖关系：虚线</span><span lang=EN-US>+</span><span
style='font-family:宋体'>箭头</span> <span style='font-family:宋体'>箭头指向被依赖的一方，也就是指向局部变量。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ArrayList</span><span style='font-family:宋体'>和</span><span
lang=EN-US>HashMap</span><span style='font-family:宋体'>如果定义为成员变量，则在成员方法中调用该成员变量前需要作初始化操作，即调用</span><span
lang=EN-US>clear()</span><span style='font-family:宋体'>方法，防止数据混淆；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>还有</span><span lang=EN-US>this</span><span
style='font-family:宋体'>关键字的使用，如果加不加该关键字对结果都没有什么影响，但是不加的话可能会会清晰，这时候最好还是添加；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>一共有四个角色</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Product</span><span
style='font-family:宋体'>产品类，</span><span lang=EN-US>Builder</span><span
style='font-family:宋体'>抽象建造者，</span><span lang=EN-US>Concretebuilder</span><span
style='font-family:宋体'>具体建造者和</span><span lang=EN-US>Director</span><span
style='font-family:宋体'>导演类，建造者其实就是控制产品的组成方式，相比于模板方法，增加了多个的模板。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>封装性</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='font-family:宋体'>客户端不需要知道产品内部的组成细节；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>建造者独立，容易拓展；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>便于控制细节风险；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>使用场景：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>相同的方法，不同的执行顺序，会产生不同的效果；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>一个对象中不同零部件的自由组合，会产生不同的效果；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK17"><span
lang=EN-US>2.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>原型模式</span></a></h3>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>定义</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>Prototype Patt</span><span lang=EN-US>ern</span><span
style='font-family:宋体'>，原型模式，定义：</span><span lang=EN-US>Specify the objects to
create using a prototypical instance, and create new objects by copying this
prototype.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><a
name="OLE_LINK12"><span lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>实现</span><span lang=EN-US>C</span></a><span
lang=EN-US>loneable</span><span style='font-family:宋体'>接口，并覆写</span><span
lang=EN-US>Object</span><span style='font-family:宋体'>类中的</span><span
lang=EN-US>clone</span><span style='font-family:宋体'>方法</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class PrototypeClass
implements Cloneable{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
PrototypeClass clone() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
name="OLE_LINK8">PrototypeClass prototypeClass</a>=null;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
name="OLE_LINK14">try {</a></span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prototypeClass=(PrototypeClass)super.clone();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
catch (Exception e) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
TODO: handle exception</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
prototypeClass;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt'><span style='font-family:
宋体'>使用的时候直接用</span><a name="OLE_LINK9"></a></p>

<p class=MsoListParagraph style='margin-left:57.0pt;text-indent:0cm'><a
name="OLE_LINK13"></a><a name="OLE_LINK10"><span lang=EN-US>PrototypeClass</span></a><span
lang=EN-US> <a name="OLE_LINK11">prototypeClass</a>=new PrototypeClass();</span></p>

<p class=MsoListParagraph style='margin-left:57.0pt;text-indent:0cm'><span
lang=EN-US>PrototypeClass prototypeClassClone= prototypeClass.clone();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>作用相当于</span><span lang=EN-US>new</span><span
style='font-family:宋体'>；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><a
name="OLE_LINK16"><span lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>浅拷贝与深拷贝；</span></a></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:0cm'><span
style='font-family:宋体'>浅拷贝指的是对象使用</span><span lang=EN-US>clone()</span><span
style='font-family:宋体'>方法时，拷贝的只是对象本身，对于对象内的数组和引用的对象等都不拷贝，若要进行深拷贝，可以加几行代码：</span></p>

<p class=MsoListParagraph style='margin-left:81.0pt;text-indent:24.0pt'><span
lang=EN-US>try {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prototypeClass=(PrototypeClass)super.clone();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
name="OLE_LINK15">this.arrayList</a>= this.arrayList.clone();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
catch (Exception e) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
TODO: handle exception</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>clone</span><span style='font-family:宋体'>和</span><span
lang=EN-US>final</span><span style='font-family:宋体'>关键字是矛盾的，两者只能存其一；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>性能优良</span> </p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:0cm'><span
style='font-family:宋体'>原型模式的拷贝是基于内存中的二进制流的拷贝，性能要比直接</span><span lang=EN-US>new</span><span
style='font-family:宋体'>一个对象好很多，特别是对于需要循环大量创建同一对象的情况；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>逃避构造函数的约束</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:0cm'><span
style='font-family:宋体'>这是他的优点，同时又是他的缺点，因为</span><span lang=EN-US>clone()</span><span
style='font-family:宋体'>方法不会执行构造函数；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:21.0pt;text-indent:-21.0pt'><a name="OLE_LINK60"><span
lang=EN-US>三、<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>结构类模式</a></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>3.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>适配器模式</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Adapter Pattern</span><span style='font-family:
宋体'>，又叫变压器模式或者包装模式，定义：</span><span lang=EN-US>Convert the interface of a class
into another interface clients expert. Adapter lets classers work together that
couldn’t otherwise because of incompatible interfaces.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>三个角色：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Target</span><span style='font-family:宋体'>目标角色，也即期望接口；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><a
name="OLE_LINK32"><span lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Adaptee</span></a><span style='font-family:宋体'>源角色</span><span
style='font-family:宋体'>，需要被转换的类或者对象；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Adapter</span><span style='font-family:宋体'>适配器角色。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK31"><span lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>代码实现：</span></a></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>目标角色</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
interface Target{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void Request();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>目标角色的实现类</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
class ConcreteTarget implements Target{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void Request() {</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;If
you need help, Please call me.&quot;);</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>源角色</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
class Adaptee{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doSomething() {</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;I'm
kind of buzy,leave me alone,ple.&quot;);</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>适配器角色</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
class Adapter extends Adaptee implements Target{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void Request() {</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.doSomething();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>场景类</span><span lang=EN-US>/</span><span
style='font-family:宋体'>高层类</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
class Client{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void main(string[] args) {</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>原有的业务逻辑</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Target
target1=new ConcreteTarget();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Target1.Request();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>现在增加适配器角色后</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Target
target2=new ConcreteTarget();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Target2.Request();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>项目必须满足依赖倒置原则和里氏替换原则，否则使用时需要很大的改造：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>关联关系指的是通过构造函数传递参数；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>当需要适配的</span><a name="OLE_LINK33"><span
lang=EN-US>Adaptee</span></a><span style='font-family:宋体'>源角色</span><span
style='font-family:宋体'>有多个时，由于</span><span lang=EN-US>java</span><span
style='font-family:宋体'>不支持多继承功能，此时可将多继承的关系变为关联的关系，通过构造函数传递</span><span
lang=EN-US>Adaptee</span><span style='font-family:宋体'>源角色。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>增加了类的透明性。我们访问</span><span
lang=EN-US>Target</span><span style='font-family:宋体'>目标角色，但是具体的实现都委托了给源角色，而这些对高层此模块是透明的，也不用关心；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>提高了类的复用度</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>灵活性非常好</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>使用场景：</span></p>

<p class=MsoNormal><span style='font-family:宋体'>当你有动机想要修改一个已经投产的接口时，比如说新建一个类，但是这个类又不符合当前的接口时</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK59"><span
lang=EN-US>3.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>桥梁模式</span></a></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Bridge Pattern</span><span style='font-family:
宋体'>，定义：</span><span lang=EN-US>Decouple an abstraction from its implementation
so that the two can vary independently.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>四个角色</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Abstraction</span><span style='font-family:宋体'>抽象化角色</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Implementor</span><span style='font-family:宋体'>实现化角色</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>RefinedAbstraction</span><span style='font-family:
宋体'>修正抽象化角色</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>d)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ConcreteImplementor</span><span
style='font-family:宋体'>具体实现化角色</span></p>

<p class=MsoNormal><span style='font-family:宋体'>其实就是在引用的时候用使用接口引用，然后在高层模块调用的时候才传递具体的实现类，非常简单。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK28"><span
lang=EN-US>3.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>组合模式</span></a></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Composite Pattern</span><span style='font-family:
宋体'>，定义：</span><span lang=EN-US>Compose objects into tree structures to
represent part-whole hierarchies. Composite lets clients treat individual
object and compositions of objects uniformly.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>三个角色：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Component</span><span style='font-family:宋体'>抽象构件角色，定义组合对象共有的方法和属性，是一个接口；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Leaf</span><span style='font-family:宋体'>叶子构件，其再下没有其他分支，也就是遍历的最小单位；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Composite</span><span style='font-family:宋体'>树枝构件</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>关键在于树枝和树叶共同的接口和实现共同接口的分开的接口，以及场景类的递归操作，实现代码如下</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>抽象构建角色</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
interface Component{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doSomething();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>抽象树叶角色</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
interface class AbstractLeaf implements Component{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doSomething();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>抽象树枝角色</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
interface AbstractComposite implements Component{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void add(Component component);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void remove(Component component);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
ArrayList&lt;Component&gt; getChildren();&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doSomething() {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>树叶构建</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Leaf implements <a name="OLE_LINK38">Abstrac</a>tLeaf{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doSomething() {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
TODO Auto-generated method stub</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>树枝构建</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Composite implements AbstractComposite{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList&lt;Component&gt;
arrayList=new ArrayList&lt;Component&gt;();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void add(Component component) {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.arrayList.add(component);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void remove(Component component) {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.arrayList.remove(component);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
ArrayList&lt;Component&gt; getChildren() {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
this.arrayList;</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doSomething() {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
TODO Auto-generated method stub&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span style='font-family:
宋体'>场景类</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Client{&nbsp;&nbsp; </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void main(String[] args) {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Composite
root=new Composite();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; root.doSomething();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Composite
branch=new Composite();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; branch.doSomething();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Leaf
leaf1=new Leaf();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Leaf
leaf2=new Leaf();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; root.add(branch);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; branch.add(leaf1);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; branch.add(leaf2);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void display(Composite root) {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; root.doSomething();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(Component
c:root.getChildren) {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(c
instanceof Leaf) {</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c.doSomething();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else
{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c.doSomething();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; display((Composite)c);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>高层模块调用简单，其不必挂心自己调用的是树枝还是树叶；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>节点增加自由，符合开闭原则；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>缺点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>违反了依赖倒置的原则</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>由于最初接口中只有</span><a name="OLE_LINK39"><span lang=EN-US>doSomething()</span></a><span
style='font-family:宋体'>的方法，而子类中的方法不仅有</span><span lang=EN-US>doSomething()</span><span
style='font-family:宋体'>方法，所以不能对象的表面类不能直接使用最初的接口，必须使用能容纳所有方法的最近的接口或者时父类，按照以上原则，就<a
name="OLE_LINK40">违反了依赖倒置的原则</a>；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>拓展：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>安全的<a name="OLE_LINK36">组合模式</a></span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>以上讲的就是安全的组合模式；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>透明的组合模式</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>其实就是把</span><span lang=EN-US>add()</span><span
style='font-family:宋体'>，</span><span lang=EN-US>remove()</span><span
style='font-family:宋体'>和</span><a name="OLE_LINK37"><span lang=EN-US>getChildren()</span></a><span
style='font-family:宋体'>的方法搬到抽象类</span><span lang=EN-US>Component</span><span
style='font-family:宋体'>中去，后面不管是树叶还是树枝都拥有以上方法，需要判断</span><span lang=EN-US>getChildren()</span><span
style='font-family:宋体'>的返回值确定是树枝节点还是叶子节点，但是这样做的好处是符合依赖倒置的原则，而且遍历的时候不需要强转类型；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>组合模式的遍历</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><a
name="OLE_LINK41"><span lang=EN-US>getChildren()</span></a><span
style='font-family:宋体'>方法换成</span><span lang=EN-US>getParent()</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>3.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>装饰模式</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span><span lang=EN-US>Decorator
Pattern</span><span style='font-family:宋体'>，定义</span><span lang=EN-US>Attach
additional responsibilities to an object dynamically keeping the same
interface. Decroators provide a flexible alternative to subclassing for
extending functionality.</span></p>

<p class=MsoNormal><span style='font-family:宋体'>四个角色：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Component</span><span style='font-family:宋体'>抽象挂件</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK27"><span lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Concrete</span></a><span lang=EN-US>Component</span><span
style='font-family:宋体'>具体挂件</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Decorate</span><span style='font-family:宋体'>装饰角色</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Concrete</span><span style='font-family:宋体'>具体装饰角色</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoNormal><span style='font-family:宋体'>装饰类和被装饰类可以独立发展；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>缺点：</span></p>

<p class=MsoNormal><span style='font-family:宋体'>多层装饰比较复杂，像剥洋葱一样，出现问题很难找；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>3.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>门面模式</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Fa&ccedil;ade Pattern</span><span style='font-family:
宋体'>，也叫外观模式，定义：</span><span lang=EN-US>Provide a unified interface to a set of
interface in a subsystem. Fa&ccedil;ade defines a higher-level interface that makes
the subsystem easier to use.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>其实就是找一个<a name="OLE_LINK54">门面对象</a>来关联其他<a
name="OLE_LINK53">业务对象</a>，作为一个同一的接口，你想访问业务对象，必须通过门面对象，门面对象没有的对象，你无法访问得到。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>当一个门面的代码超过</span><span lang=EN-US>200</span><span
style='font-family:宋体'>行时，可以考虑拆分多个门面。按照功能拆分比较好，如数据库的</span><span lang=EN-US>crud</span><span
style='font-family:宋体'>操作</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>子系统可以提供不同的访问路径；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>相同的代码尽量只写一次；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>5)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>门面不参与子系统内的业务逻辑；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>减少系统的相互依赖；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>提高灵活性；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>提高安全性</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>想让你访问子系统的哪些业务就开通哪些逻辑，不在门面上开通的方法，你休想访问得到；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>缺点：</span></p>

<p class=MsoNormal><span style='font-family:宋体'>不符合开闭原则，一旦发现有小错误想要修改，必须修改门面角色的代码，这个风险相当大；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>使用场景：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>子系统相对独立，外界对子系统的访问只要黑箱操作即可；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>预防低水平人员带来的风险扩散，哈哈，这是在说我吗？</span><span
lang=EN-US>^_^</span><span style='font-family:宋体'>；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>3.6<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>享元模式</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Flyweight Pattern</span><span style='font-family:
宋体'>，池技术的重要实现方式，定义：</span><span lang=EN-US>Use sharing to support large numbers
of fine-grained objects efficient.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>细粒度的对象：数量对且性质相近</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>内部对象</span> <span style='font-family:
宋体'>可共享的信息，储存在享元对象内部并且不会随着环境改变而改变，如实体类中的</span><span lang=EN-US>id, postAddress</span><span
style='font-family:宋体'>等，他们可以作为一个对象的东陶附加信息，不必直接储存在具体的某个对象中，属于可以共享的部分；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><a
name="OLE_LINK58"><span lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>外部状态</span></a> <span
style='font-family:宋体'>是对象得以以来的标记，随环境变化而变化，不可以共享</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK56"><span lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>共享对象池</span></a></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>容器定义</span> </p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>提供客户端访问的接口，池中有可用对象的时候，可以直接从池中获取，否则建立一个新的对象，并放置到池中；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>四个对象</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Flyweight</span><span style='font-family:宋体'>抽象享元角色</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><a
name="OLE_LINK57"><span lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ConcreteFlyweight</span></a><span
style='font-family:宋体'>具体享元角色</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>unsharedConcreteFlyweight</span><span
style='font-family:宋体'>不可具体享元角色</span> <span style='font-family:宋体'>不存在外部对象，或者由于安全要求，如线程安全不能使用共享技术的对象，一般不会出现在享元工厂中；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>d)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>FlyweightFactory</span><span style='font-family:
宋体'>享元工厂</span> <span style='font-family:宋体'>生产细粒度的对象</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK51"><span lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>内存溢出的可能：</span></a></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>内存泄漏，无意识的代码缺陷，导致内存泄漏，</span><span
lang=EN-US>jvm</span><span style='font-family:宋体'>不能连续获得内存空间；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>对象太多。</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>内存溢出的可能：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>@Deprecated</span><span style='font-family:宋体'>注解，用于标识该段代码已经过时，不要再使用了。作为一个有素养的</span><span
lang=EN-US>coder</span><span style='font-family:宋体'>，写代码的时候应该保持历史的原貌，此举有助于版本向下兼容，特别是在产品级研发中；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>在程序开发过程中，确认只需要一次赋值的属性设置为</span><span
lang=EN-US>final</span><span style='font-family:宋体'>类型，避免无意的修改导致逻辑混乱，特别时</span><span
lang=EN-US>Session</span><span style='font-family:宋体'>级的常量或者变量；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>外部状态作为对象池唯一标识的</span><span
lang=EN-US>key</span><span style='font-family:宋体'>，代码如下：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>抽象享元角色</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public abstract class Flyweight{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>内部状态</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
String intrinsic;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>外部状态</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected
final String extrinsic;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Flyweight(String extrinsic) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.extrinsic=extrinsic;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>定义业务操作</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract void operate();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@return the intrinsic</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
String getIntrinsic() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
intrinsic;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param intrinsic the intrinsic to set</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setIntrinsic(String intrinsic) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.intrinsic
= intrinsic;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>具体享元角色</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class ConcreteFlyweight1
extends Flyweight{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>接收外部状态</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
ConcreteFlyweight1(String extrinsic) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super(extrinsic);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>跟据外部状态进行逻辑处理</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void operate() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>业务逻辑</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class ConcreteFlyweight2
extends Flyweight{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>接收外部状态</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
ConcreteFlyweight2(String extrinsic) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super(extrinsic);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>跟据外部状态进行逻辑处理</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void operate() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>业务逻辑</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>享元工厂</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class FlywightFactory{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>定义一个容器</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
static HashMap&lt;String, Flyweight&gt; pool=new HashMap()&lt;String,
Flyweight&gt;;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>巷元工厂</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static Flyweight getFlyweight(String extrinsic) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Flyweight
flyweight=null;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(pool.containsKey(extrinsic))
{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; flyweight=pool.get(extrinsic);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else
{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; flyweight=new
Flyweight(extrinsic);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pool.put(extrinsic,
flyweight)</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
flyweight</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>大大减少应用</span> <span
style='font-family:宋体'>程序创建的对象，降低程序内存的占用，需要分离处外部状态和内部状态，而且外部状态具有固话特性（即从数量上是可以被有限穷举的）；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>拓展：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>线程安全的问题；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>主要原因是享元对象的数量太少，导致每个线程都到对象池中获得对象，然后修改其属性。目前没有什么参考的标准，只能依靠经验，在需要的地方考虑一下线程安全，在大部分场景中都不需要考虑。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>性能平衡；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>将外部状态作为一个类来使用，但此时需要注意的是，如果一个对象作为一个</span><span
lang=EN-US>Map</span><span style='font-family:宋体'>类的键值，一定要确保重写了</span><span
lang=EN-US>equals</span><span style='font-family:宋体'>和</span><span lang=EN-US>hashCode</span><span
style='font-family:宋体'>方法，否则会出现通过简直搜索失败的情况，例如</span><span lang=EN-US>map.get(object)</span><span
style='font-family:宋体'>、</span><span lang=EN-US>map.contain(object)</span><span
style='font-family:宋体'>等会返回失败的结果，代码如下：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span style='font-family:
宋体'>外部状态类</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class ExtrinsicState{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
String subject;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
String location;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@return the subject</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
String getSubject() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
subject;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@return the location</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
String getLocation() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
location;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param subject the subject to set</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setSubject(String subject) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.subject
= subject;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param location the location to set</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setLocation(String location) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.location
= location;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
boolean equals(Object obj) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(obj instanceof ExtrinsicState) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExtrinsicState
extrinsicState=(ExtrinsicState)obj;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
(extrinsicState.getLocation().equals(this.location) &amp;&amp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extrinsicState.getSubject()().equals(this.subject));</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
false;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
int hashCode() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
TODO Auto-generated method stub</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
this.location.hashCode()+this.subject.hashCode();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK7"><span
lang=EN-US>3.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>代理模式</span></a></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Proxy Pattern</span><span style='font-family:
宋体'>，又叫委托模式，定义</span><span lang=EN-US>: Provide a surrogate or placeholder for
another object to control access to it</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>三种角色，</span><span lang=EN-US>Subject</span><span
style='font-family:宋体'>抽象主题角色，</span><span lang=EN-US>RealSubject</span><span
style='font-family:宋体'>具体主题角色，</span><span lang=EN-US>Proxy</span><span
style='font-family:宋体'>代理主题角色。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>具体主题角色通过</span><span lang=EN-US>Proxy</span><span
style='font-family:宋体'>代理的构造函数传入；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>动态代理：动态代理实现代理的职责，业务逻辑由</span><span
lang=EN-US>Subject</span><span style='font-family:宋体'>实现，两者没有必然的相互耦合关系，通知</span><span
lang=EN-US>Advice</span><span style='font-family:宋体'>从另外一个切面切入，最终在高层模块也就是</span><span
lang=EN-US>client</span><span style='font-family:宋体'>进行耦合，完成逻辑的封装任务。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>5)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>其实代理模式最重要的特点是可以在不改变已有代码的情况下（主题类），增强或者控制对象的行为。代理模式侧重于拦截，装饰模式侧重与加强</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>具体代码：</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>抽象主题类</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
interface Subject{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void request();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>真实主题类</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
class RealSubject extends Subject{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void request() {</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>具体的逻辑业务</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>代理类</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
class Proxy extends Subject{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Subject subject=null;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Proxy(){</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.subject=new
Proxy();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Proxy(Object object){</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.subject=object;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void request() {</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.before();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.subject.request();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.after();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void before() {</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>预处理</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void after() {</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>后处理</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK4"><span lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Proxy.newProxyInstance</span></a></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><a
name="OLE_LINK5"><span lang=EN-US>Proxy</span></a><span style='font-family:
宋体'>类中的方法</span><span lang=EN-US>Proxy</span><span lang=EN-US>.newProxyInstance</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;(ClassLoader loader, Class&lt;?&gt;[] interfaces,
InvocationHandler h)</span><span style='font-family:宋体'>是在运行时生成一个类，这个类会实现你指定的一组接口，而这个类没有</span><span
lang=EN-US>.java</span><span style='font-family:宋体'>文件，是在运行时生成的，你也不用去关心它是什么类型的，你只需要知道它实现了哪些接口即可。</span><span
lang=EN-US>Proxy</span><span style='font-family:宋体'>类的</span><span lang=EN-US>newInstance()</span><span
style='font-family:宋体'>方法有三个参数：</span></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:49.6pt;text-indent:-1.0cm;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>4.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:49.6pt;text-indent:-1.0cm;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>4.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:49.6pt;text-indent:-1.0cm;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>4.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:49.6pt;text-indent:-1.0cm;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>4.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:49.6pt;text-indent:-1.0cm;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>4.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:49.6pt;text-indent:-1.0cm;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>4.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ClassLoader loader</span><span style='font-family:
宋体'>：它是类加载器类型，你不用去理睬它，你只需要知道怎么可以获得它就可以了：</span><span lang=EN-US>MyInterface.class.getClassLoader()</span><span
style='font-family:宋体'>就可以获取到</span><span lang=EN-US>ClassLoader</span><span
style='font-family:宋体'>对象，没错，只要你有一个</span><span lang=EN-US>Class</span><span
style='font-family:宋体'>对象就可以获取到</span><span lang=EN-US>ClassLoader</span><span
style='font-family:宋体'>对象；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Class[] interfaces</span><span style='font-family:
宋体'>：指定</span><span lang=EN-US>newProxyInstance()</span><span style='font-family:
宋体'>方法返回的对象要实现哪些接口，没错，可以指定多个接口，例如上面例子只我们只指定了一个接口：</span><span lang=EN-US>Class[]
cs = {MyInterface.class};</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>InvocationHandler h</span><span
style='font-family:宋体'>：它是最重要的一个参数！它是一个接口！它的名字叫调用处理器！</span><span lang=EN-US>InvocationHandler</span><span
style='font-family:宋体'>接口只有一个方法，即</span><span lang=EN-US>invoke()</span><span
style='font-family:宋体'>方法！它是对代理对象所有方法的唯一实现。也就是说，无论你调用代理对象上的哪个方法，其实都是在调用</span><span
lang=EN-US>InvocationHandler</span><span style='font-family:宋体'>的</span><span
lang=EN-US>invoke()</span><span style='font-family:宋体'>方法。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK6"><span lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>InvocationHandler</span></a><span lang=EN-US>.invoke</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>InvocationHandler</span><span style='font-family:宋体'>的</span><span
lang=EN-US>invoke()</span><span style='font-family:宋体'>方法的参数有三个：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Object proxy</span><span style='font-family:
宋体'>：代理对象，也就是</span><span lang=EN-US>Proxy.newProxyInstance()</span><span
style='font-family:宋体'>方法返回的对象，通常我们用不上它。就本人目前的水平看来，这个</span><span lang=EN-US>proxy</span><span
style='font-family:宋体'>参数并没有什么作用，在整个动态代理机制中，并没有用到</span><span lang=EN-US>InvocationHandler</span><span
style='font-family:宋体'>中</span><span lang=EN-US>invoke</span><span
style='font-family:宋体'>方法的</span><span lang=EN-US>proxy</span><span
style='font-family:宋体'>参数。而传入的这个参数实际是代理类的一个实例。我想可能是为了让程序员在</span><span
lang=EN-US>invoke</span><span style='font-family:宋体'>方法中使用反射来获取关于代理类的一些信息吧。，；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Method method</span><span style='font-family:
宋体'>：表示当前被调用方法的反射对象，例如</span><span lang=EN-US>mi.fun1()</span><span
style='font-family:宋体'>，那么</span><span lang=EN-US>method</span><span
style='font-family:宋体'>就是</span><span lang=EN-US>fun1()</span><span
style='font-family:宋体'>方法的反射对象；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Object[] args</span><span style='font-family:
宋体'>：表示当前被调用方法的参数，当然</span><span lang=EN-US>mi.fun1()</span><span
style='font-family:宋体'>这个调用是没有参数的，所以</span><span lang=EN-US>args</span><span
style='font-family:宋体'>是一个零长数组。</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span style='font-family:宋体'>最后要说的是</span><span
lang=EN-US>invoke()</span><span style='font-family:宋体'>方法的返回值为</span><span
lang=EN-US>Object</span><span style='font-family:宋体'>类型，它表示当前被调用的方法的返回值，当然</span><span
lang=EN-US>mi.fun1()</span><span style='font-family:宋体'>方法是没有返回值的，所以</span><span
lang=EN-US>invoke()</span><span style='font-family:宋体'>返回的就必须是</span><span
lang=EN-US>null</span><span style='font-family:宋体'>了。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>想象中的类</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>InvocationHandler</span><span style='font-family:宋体'>接口只有一个方法，即</span><span
lang=EN-US>invoke()</span><span style='font-family:宋体'>方法！它是对代理对象所有方法的唯一实现。也就是说，无论你调用代理对象上的哪个方法，其实都是在调用</span><span
lang=EN-US>InvocationHandler</span><span style='font-family:宋体'>的</span><span
lang=EN-US>invoke()</span><span style='font-family:宋体'>方法。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>class X implements MyInterface {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
style='font-family:宋体'>　　</span><span lang=EN-US>private InvocationHandler h;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
style='font-family:宋体'>　　</span><span lang=EN-US>public X(InvocationHandler h)
{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
style='font-family:宋体'>　　　　</span><span lang=EN-US>this.h = h;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
style='font-family:宋体'>　　</span><span lang=EN-US>}</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
style='font-family:宋体'>　　</span><span lang=EN-US>public void fun1() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
style='font-family:宋体'>　　　　</span><span lang=EN-US>h.invoke();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
style='font-family:宋体'>　　</span><span lang=EN-US>}</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
style='font-family:宋体'>　　</span><span lang=EN-US>public void fun2() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
style='font-family:宋体'>　　　　</span><span lang=EN-US>h.invoke();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
style='font-family:宋体'>　　</span><span lang=EN-US>}</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>拓展：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>透明代理</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>用户不用设置服务器地址，就可以直接访问，也就是代理服务器对用户来讲是透明的，不用知道他的存在。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>普通代理</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>需要用户自己设置代理服务器的</span><span lang=EN-US>IP</span><span
style='font-family:宋体'>地址，用户必须知道代理的存在。而且要求客户端只能访问代理角色，而不能访问真实角色；“屏蔽了真实角色的变更对高层模块的影响，真实角色想怎么改就怎么改，对高层次模块没有影响。”这句话让我理解就是比较方便更改真实角色的类名，或者更改真实角色的类名的实例名字，而尽量少的改动其他代码，减少有毒代码的产生。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>强制代理</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>调用者直接调用真实角色，而不用关心代理是否存在，其代理的产生由真实角色决定。一般思维都是通过代理找到真实角色，而强制代理却要“强制”必须通过真实角色查找代理角色，否则不能访问。“找明星时明星很忙让你去找他的代理，不能随便找其他的代理”</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>代理也是有个性的</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>代理可以实现多个不同的接口，来完成不同的任务。代理的目的是在目标对象方法的基础上作增强，这种增强的本质是对目标对象的方法进行拦截和过滤。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>5)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>动态代理</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>年度压轴大戏，目前有一个非常流行的名称，叫</span><span lang=EN-US>AOP Aspect Oriented
Programming</span><span style='font-family:宋体'>，“面向横切面编程”，其核心就是采用了动态代理机制。该机制宣称“我已经实现该接口下的所有方法”</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>你只需要知道，</span><span lang=EN-US>Proxy</span><span
style='font-family:宋体'>类的静态方法</span><span lang=EN-US>newProxyInstance()</span><span
style='font-family:宋体'>方法返回的方法是实现了指定接口的实现类对象，甚至你都没有看见实现类的代码。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>动态代理实现了可以在原始类和接口还未知的时候，就确定代理类的代理行为</span> <span
style='font-family:宋体'>。相对静态代理，</span> <span style='font-family:宋体'>如果不同接口的某些类想使用代理模式来实现相同的功能</span>
<span style='font-family:宋体'>，静态代理需要实现多个代理类，动态代理只需要实现一个代理类。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:21.0pt;text-indent:-21.0pt'><a name="OLE_LINK61"><span
lang=EN-US>四、<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>行为类模式</a></h2>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK21"></a><a
name="OLE_LINK20"><span lang=EN-US>4.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>中介者模式</span></a></h3>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>定义</span></p>

<p class=MsoListParagraph style='margin-left:63.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Mediator Pattern</span><span style='font-family:
宋体'>，定义：</span><span lang=EN-US>Define an object that encapsulates how a set of
objects interact. Mediator promotes loose coupling by keeping objects from
referring to each other explicitly, and it lets you vary their interaction
independently.</span></p>

<p class=MsoListParagraph style='margin-left:63.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>角色：</span></p>

<p class=MsoListParagraph style='margin-left:84.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Mediator </span><span style='font-family:宋体'>抽象中介者</span></p>

<p class=MsoListParagraph style='margin-left:84.0pt;text-indent:-21.0pt'><a
name="OLE_LINK18"><span lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Concrete</span></a><span lang=EN-US>Mediator </span><span
style='font-family:宋体'>具体中介者</span></p>

<p class=MsoListParagraph style='margin-left:84.0pt;text-indent:-21.0pt'><a
name="OLE_LINK19"><span lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Colleague</span></a><span lang=EN-US> </span><span
style='font-family:宋体'>抽象同事</span></p>

<p class=MsoListParagraph style='margin-left:84.0pt;text-indent:-21.0pt'><span
lang=EN-US>d)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ConcreteColleague </span><span style='font-family:
宋体'>具体同事</span> <span style='font-family:宋体'>具体同事有两种方法，分别是独立方法（</span><span
lang=EN-US>self-Method</span><span style='font-family:宋体'>）和依赖方法（</span><span
lang=EN-US>Dep-Method</span><span style='font-family:宋体'>）</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span style='font-family:宋体'>细节</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span style='font-family:宋体'>网络的基本知识，网络的拓扑类型主要分为三种类型：总线型，环形和星型，一旦遇到蜘蛛网类型的结构最好把他梳理成星型结构；</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span style='font-family:宋体'>最佳实践</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span style='font-family:宋体'>一般当相关联的对象大于</span><span
lang=EN-US>2</span><span style='font-family:宋体'>的时候才考虑使用中介者模式，同时需要提防中介者的膨胀问题；</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK24"><span
lang=EN-US>4.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>命令模式</span></a></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Command Pattern</span><span style='font-family:
宋体'>，定义：</span><span lang=EN-US>Encapsulate a request as a Object, thereby
letting you parameterize cliets with different requests, queue or log requests,
and support undoable operations.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>三个角色：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Reciver</span><span style='font-family:宋体'>接收者</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><a
name="OLE_LINK22"><span lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Command</span></a><span lang=EN-US>er</span><span
style='font-family:宋体'>命令者</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Invoke</span><span style='font-family:宋体'>调用者角色</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK23"><span lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>代码实现：</span></a></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>抽象接收者</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract class Reciver{</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract doSomething();</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>具体接收者</span><span lang=EN-US>1</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Reciver1 extends Reciver{</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doSomething() {</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>具体接收者</span><span lang=EN-US>2</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Reciver2 extends Reciver{</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doSomething() {</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>抽象命令</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract class Command{</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract void execute();</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>具体命令</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Delete extends Command{</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Reciver reciver=null;</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param reciver the reciver to set</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setReciver(Reciver reciver) {</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.reciver
= reciver;</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract void execute() {</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.reciver.doSomething();</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Copy extends Command{</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Reciver reciver=null;</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param reciver the reciver to set</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setReciver(Reciver reciver) {</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.reciver
= reciver;</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract void execute() {</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.reciver.doSomething();</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>执行者</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Invoker{</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Command command=null;</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param command the command to set</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setCommand(Command command) {</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.command
= command;</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void action() {</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.command.execute();</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>场景类</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Client{</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Command
command=new Copy();</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reciver
reciver=new Reciver1();</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; command.setReciver(reciver);</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Invoker
invoker=new Invoker();</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; invoker.setCommand(command);</span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; invoker.action(); </span></p>

<p class=MsoNormal style='margin-left:45.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>实现过程中最好不要把接收者暴露给客户；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK26"><span
lang=EN-US>4.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>责任链模式</span></a></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoNormal><span lang=EN-US>Responsibility Chain pattern</span><a
name="OLE_LINK25"><span style='font-family:宋体'>定义：</span></a><span lang=EN-US>Avoid
coupling the sender of a request to its receiver by giving more than one object
a change to handle the request. Chain the receiving objects and pass the
request along the chain until an object handles it.</span></p>

<p class=MsoNormal><span style='font-family:宋体'>抽象的处理者实现了三个职责：</span></p>

<p class=MsoNormal><span style='font-family:宋体'>定义一个请求的处理方法</span><span
lang=EN-US>handleMessage</span><span style='font-family:宋体'>，唯一对外开放的方法；</span></p>

<p class=MsoNormal><span style='font-family:宋体'>定义一个链的编排方法</span><span
lang=EN-US>setNext</span><span style='font-family:宋体'>，设置下一个处理者；</span></p>

<p class=MsoNormal><span style='font-family:宋体'>定义了具体请求者必须实现的两个方法：定义自己能够处理的</span><span
lang=EN-US>getHanderLever</span><span style='font-family:宋体'>和具体的处理任务</span><span
lang=EN-US>echo</span><span style='font-family:宋体'>；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>代码：</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>抽象处理者</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; public
abstract class Handler{</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Handler nextHandler;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setNext(Handler handler) {</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.nextHandler=handler;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static Response handleMessage(Request request) {</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response
response=null;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(this.getHandlerLever.equal(request.getRequestLevel))
{</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; response=this.echo(request);</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else
{</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(this.nextHandler
!=null) {</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; response=this.nextHandler.handleMessage(request);</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else
{</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
response;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected
abstract Level getHandlerLever();</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected
abstract Response echo(Request request);</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; </span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>具体处理者</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; public
class ConcreteHandler1 extends Handler{</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected
Response echo(Request request) {</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>完成逻辑的处理</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
null;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected
Lever getHandLerLever() {</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>设置自己的级别</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
null;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; </span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; public
class ConcreteHandler2 extends Handler{</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected
Response echo(Request request) {</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>完成逻辑的处理</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
null;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected
Lever getHandLerLever() {</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>设置自己的级别</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
null;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; public
class ConcreteHandler3 extends Handler{</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected
Response echo(Request request) {</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>完成逻辑的处理</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
null;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected
Lever getHandLerLever() {</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>设置自己的级别</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
null;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; </span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>相关框架代码</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; public
class Level{</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>定义一个请求和处理登记</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; </span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; public
class Request{</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>请求的等级</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Level getRequestLevel() {</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
null;</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; </span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; public
class Reponse{</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>处理者返回的数据</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; </span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>场景类</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; public
class Client{</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void main(Static[] args) {</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Handler
handler1 =new ConcreteHandler1();</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Handler
handler2 =new ConcreteHandler2();</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Handler
handler3 =new ConcreteHandler3();</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handler1.setNext(handler2);</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handler2.setNext(handler3);</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response
response = handler1.handlerMessage(new Request());</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-US>&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>融合了模板模式的优点；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoNormal><span style='font-family:宋体'>将请求和处理分开，请求者不知是谁处理的，处理者也不必知道请求的全貌，得到解耦的效果；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>缺点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>性能问题，每次都要从链头遍历链尾，特别是链比较长的时候，性能是一个很大的问题。为了避免无意识的长递归破坏系统，一般需要在</span><span
lang=EN-US>handler</span><span style='font-family:宋体'>中设置一个最大节点数；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>调试不是很方便，有时候都不知道是那个环节出了问题；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK30"><span
lang=EN-US>4.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>策略模式</span></a></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Strategy Pattern</span><span style='font-family:
宋体'>，定义：</span><span lang=EN-US>Define a family of algorithms, encapsulate each
one, and make them interchangeable.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>三个角色：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>Context</span><span style='font-family:宋体'>封装角色</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>Strategy</span><span style='font-family:宋体'>抽象类策略角色</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>ConcreteStrategy</span><span style='font-family:宋体'>具体策略角色</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK29"><span lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>代码示例：</span></a></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>抽象的策略角色</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public interface Strategy{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doSomething();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>具体的策略角色</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class ConcreteStrategy1
extends Strategy{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doSomething() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;</span><span
style='font-family:宋体'>具体策略一</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class ConcreteStrategy2
extends Strategy{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doSomething() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;</span><span
style='font-family:宋体'>具体策略二</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>封装角色</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class Content{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Strategy strategy;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Content(Strategy strategy){</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.strategy=strategy;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doAnything() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.strategy.doSomething();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>高层模块</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class Client{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void main(String[] args) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Strategy
strategy=new ConcreteStrategy1;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Content
content=new Content(strategy);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; content.doAnything;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>采用面向对象的继承和多态机制；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>变形：枚举策略</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>策略可以自由切换；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>避免使用多重条件判断；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>拓展性良好；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>缺点：</span></p>

<p class=MsoNormal><span style='font-family:宋体'>策略类数量增多，但是复用的可能性很小；</span></p>

<p class=MsoNormal><span style='font-family:宋体'>所有的策略类都必须对外暴露，上层模块必须知道有哪些策略，然后才能决定使用哪一个策略，这与迪米特原则是相违背的。</span></p>

<p class=MsoNormal><span style='font-family:宋体'>如果一个系统的策略类数量超过</span><span
lang=EN-US>4</span><span style='font-family:宋体'>个，需要考虑使用混合模式，解决策略类膨胀和对外暴露的问题，否则日后的系统维护是一个烫手山芋；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>使用场景：</span></p>

<p class=MsoNormal><span style='font-family:宋体'>算法需要自由切换的场景；</span></p>

<p class=MsoNormal><span style='font-family:宋体'>需要屏蔽算法规则的场景；</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK42"><span
lang=EN-US>4.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>迭代器模式</span></a></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Iterator pattern</span><span style='font-family:
宋体'>，定义：</span><span lang=EN-US>Provide a way to access the elements of an
aggregate object sequentially without exposing its underlying representation.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>容器：能容纳对象的所有类型都可以称为对象，如</span><span
lang=EN-US>collection</span><span style='font-family:宋体'>集合类型，</span><span
lang=EN-US>Set</span><span style='font-family:宋体'>类型等；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>迭代器模式的产生是为了解决遍历这些容器中的元素</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>四个角色：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Iterator</span><span style='font-family:宋体'>抽象迭代器</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ConcreteIterator</span><span style='font-family:
宋体'>具体迭代器</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Aggregate</span><span style='font-family:宋体'>抽象容器</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>d)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ConcreteAggregate</span><span style='font-family:
宋体'>具体容器</span><span lang=EN-US> </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>代码示例，注意迭代器的删除和添加方法都需要把当前图标加</span><span
lang=EN-US>1</span><span style='font-family:宋体'>：</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>抽象迭代器</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
interface Iterator{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Object next();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
boolean hasNext();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
boolean remove();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>具体迭代器</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
class ConcreteIterator implements Iterator{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Vector vector=new Vector();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>定义当前游标</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
int cursor=0;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
ConcreteIterator(Vector vector) {</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.vector=vector;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
Object next() {</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object
result=null;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(hasNext())
{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result=this.vector.get(this.cursor++);</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else
{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result=null;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
result;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
boolean hasNext() {</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
TODO Auto-generated method stub</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(this.cursor==vector.size())
{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
false;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else
{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
true;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
boolean remove() {</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
TODO Auto-generated method stub</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
false;</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>抽象容器</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; public
interface Aggregate{</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void add(Object object);</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void remove(Object object);</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Iterator iterator();</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:48.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>//</span><span style='font-family:宋体'>具体容器</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class ConcreteAggregate
implements Aggregate {</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Vector vector=null; </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void add(Object object) {</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.vector.add(object);</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void remove(Object object) {</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.vector.remove(object);</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Iterator iterator() {</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
TODO Auto-generated method stub</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
new ConcreteIterator(this.vector);</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span style='font-family:
宋体'>场景类</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Client{</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void main(String[] args) {</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Aggregate
aggregate=new ConcreteAggregate;</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aggregate.add(&quot;abc&quot;);</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aggregate.add(&quot;def&quot;);</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aggregate.add(&quot;ghi&quot;);</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Iterator
iterator=aggregate.iterator();</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while
(iterator.hasNext()) {</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(iterator.next());</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:45.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>从</span><span lang=EN-US>JDK1.2</span><span
style='font-family:宋体'>开始增加</span><span lang=EN-US>java.util.<a
name="OLE_LINK34">Iterator</a></span><span style='font-family:宋体'>这个接口，并逐步把</span><span
lang=EN-US>Iterator</span><span style='font-family:宋体'>应用到各个聚集类（</span><span
lang=EN-US>collection</span><span style='font-family:宋体'>）中；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>这个<a name="OLE_LINK35">迭代器模式</a>有点落后了，一些大师级的人物甚至建议把迭代器模式从</span><span
lang=EN-US>23</span><span style='font-family:宋体'>种设计模式中删除，目前基本很少有项目再独立写迭代器了，如果是自己开发，尽量不要自己去写迭代器模型；</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK43"><span
lang=EN-US>4.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>观察者模式</span></a></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Observer Pattern</span><span style='font-family:
宋体'>，也叫做发布订阅模式，又叫触发链模式，定义：</span><span lang=EN-US>Define a one-to-many
dependency between objects so that when one object changes state, all its
dependents are notified and updated automatically.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>四个角色：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><a
name="OLE_LINK44"><span lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Subject</span></a><span style='font-family:宋体'>被观察者</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><a
name="OLE_LINK46"><span lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Observer</span></a><span style='font-family:
宋体'>观察者</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><a
name="OLE_LINK45"><span lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ConcreteSubject</span></a><a name="OLE_LINK47"><span
style='font-family:宋体'>具体</span></a><span style='font-family:宋体'>被观察者</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>d)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ConcreteObserver</span><span style='font-family:
宋体'>具体观察者</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>程序中使用的</span><a name="OLE_LINK48"><span
lang=EN-US>ArrayList</span></a><span style='font-family:宋体'>和</span><span
lang=EN-US>Vector</span><span style='font-family:宋体'>区别不是很大，只是</span><span
lang=EN-US>ArrayList</span><span style='font-family:宋体'>是线程异步的，不安全，而</span><span
lang=EN-US>Vector</span><span style='font-family:宋体'>是线程同步的，安全，就这点区别，代码如下：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>被观察者</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public abstract class Subject{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Vector&lt;Observer&gt; vector=new Vector();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void addObserver(Observer observer) {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.vector.add(observer);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void removeObserver(Observer observer) {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.vector.remove(observer);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void notifyObserver() {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(Observer
observer:this.vector)</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; observer.update();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>具体观察者</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class ConcreteSubject extends
Subject{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void doSomething() {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>做什么事情</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.notifyObserver();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>}</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>观察者</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public interface Observer{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void update();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>具体观察者</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class ConcreteObserver
implements Observer{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void update() {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;</span><span
style='font-family:宋体'>收到信息，正在处理</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>场景类</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class Client{&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void main(String[] args) {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConcreteSubject
concreteSubject =new ConcreteSubject();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Observer
observer1=new Observer();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Observer
observer2=new Observer();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; concreteSubject.add(observer1);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; concreteSubject.add(observer2);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; concreteSubject.doSomething();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>一个系统中最多出现一个既是观察者又是被观察者的角色，也就是说消息最多被转发一次，这样的话比较好控制。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>他和<a name="OLE_LINK50">责任链模式</a>最大的区别在于消息的不变性，责任链模式在消息传递过程中消息是不变的，而观察者模式是会改变消息的；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK49"><span lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>观察者和被观察者</span></a><span
style='font-family:宋体'>之间的抽象解耦；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>观察者和被观察者的拓展都变得非常方便；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>建立了一套触发机制；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>缺点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>开发效率和运行效率的问题，由于是线程同步的，一旦一个观察者运行卡壳了，会影响整体的执行效率；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>应用场景：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>事件的多级触发；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>拓展：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK92"></a><a name="OLE_LINK95"><span lang=EN-US>1)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-US>Java.util.</span></a><span lang=EN-US>Observable</span><span
style='font-family:宋体'>被观察者类，可以被继承，拥有</span><a name="OLE_LINK86"><span
lang=EN-US>super.setChanged()</span></a><span style='font-family:宋体'>，</span><a
name="OLE_LINK90"><span lang=EN-US>super.notify</span></a><a name="OLE_LINK87"><span
lang=EN-US>Observer</span></a><span lang=EN-US>s(<a name="OLE_LINK89">Object </a>obj)</span><span
style='font-family:宋体'>，</span> <span lang=EN-US>super.<a name="OLE_LINK88">deleteObservers</a>()</span><span
style='font-family:宋体'>，</span><span lang=EN-US>super. addObservers (Object Observer)</span><span
style='font-family:宋体'>等方法；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Java.util. Observer</span><span
style='font-family:宋体'>观察者接口，可以被实现，拥有</span><a name="OLE_LINK91"><span
lang=EN-US>super.update (</span></a><a name="OLE_LINK93"><span lang=EN-US>Observable
o,</span></a><span lang=EN-US> <a name="OLE_LINK94">Object arg</a>)</span><span
style='font-family:宋体'>；</span> </p>

<p class=MsoNormal><span style='font-family:宋体'>调用</span><span lang=EN-US>addObserver(</span><span
style='font-family:宋体'>观察者</span><span lang=EN-US>)</span><span
style='font-family:宋体'>方法让某指定<a name="OLE_LINK96">观察者</a>观察被观察者；</span></p>

<p class=MsoNormal><span style='font-family:宋体'>只有在</span><span lang=EN-US>setChange()</span><span
style='font-family:宋体'>被调用后，</span><span lang=EN-US>notifyObservers()</span><span
style='font-family:宋体'>才会去调用</span><span lang=EN-US>update()</span><span
style='font-family:宋体'>，否则什么都不干。一旦使用</span><span lang=EN-US>super.notifyObservers(Object
arg)</span><span style='font-family:宋体'>就会调用</span><span lang=EN-US>super.update
()</span><span style='font-family:宋体'>的方法。</span><span lang=EN-US>Observable o,</span><span
style='font-family:宋体'>称为事件源，而传过来的</span><span lang=EN-US> Oberverable o </span><span
style='font-family:宋体'>其实可以通过</span><span lang=EN-US>if</span><span
style='font-family:宋体'>语句用来判断到底是谁发过来的消息。形参</span><span lang=EN-US>Object arg</span><span
style='font-family:宋体'>，对应一个由</span><span lang=EN-US>notifyObservers(Object
arg)</span><span style='font-family:宋体'>传递来的参数，当执行的是</span><span lang=EN-US>notifyObservers()</span><span
style='font-family:宋体'>时，</span><span lang=EN-US>arg</span><span
style='font-family:宋体'>为</span><span lang=EN-US>null</span><span
style='font-family:宋体'>。。在</span><span lang=EN-US>Observer</span><span
style='font-family:宋体'>对象销毁前一定要用</span><span lang=EN-US>deleteObserver</span><span
style='font-family:宋体'>将其从列表中删除，也就是在</span><span lang=EN-US>onDestroy()</span><span
style='font-family:宋体'>方法中调用</span><span lang=EN-US>deleteObserver()</span><span
style='font-family:宋体'>方法。不然因为还存在对象引用的关系，</span><span lang=EN-US>Observer</span><span
style='font-family:宋体'>对象不会被垃圾收集，造成内存泄漏，并且已死的</span><span lang=EN-US>Observer</span><span
style='font-family:宋体'>仍会被通知到，有可能造成意料外的错误，而且随着列表越来越大，</span><span lang=EN-US>notifyObservers</span><span
style='font-family:宋体'>操作也会越来越慢。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK52"><span
lang=EN-US>4.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>备忘录模式</span></a></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Memento Pattern</span><span style='font-family:
宋体'>，也叫外观模式，定义：</span><span lang=EN-US>Without violating encapsulation, capture
and externalize an object’s internal state so that the object can be restored
to this state later.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>三个角色：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Originator</span><span style='font-family:宋体'>发起人角色；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Memento</span><span style='font-family:宋体'>备忘录角色，备忘录被创建的时候就对发起人角色进行备份；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Caretaker</span><span style='font-family:宋体'>备忘录管理员角色，用于创建和返回备忘录角色；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>保留和回复状态应该由另外一个类来承担，我们把这个类取名为备忘录，</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="_Hlk501501835"></a><a name="OLE_LINK55"><span lang=EN-US>2)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>备忘录被创建的时候就对发起人角色进行备份</span></a><span style='font-family:
宋体'>，代码如下：</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>发起人角色</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Originator{</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
String state=&quot;&quot;;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@return the state</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
String getState() {</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
state;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param state the state to set</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setState(String state) {</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.state
= state;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Memento creatMemento() {</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
new Memento();</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void restoreMemento(Memento memento) {</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setState(memento.getState());</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>备忘录角色</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Memento{</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
String state=&quot;&quot;;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Memento(String state) {</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.state=
state;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@return the state</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
String getState() {</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
state;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param state the state to set</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setState(String state) {</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.state
= state;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>备忘录管理员角色</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Caretaker{</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Memento memento;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@return the memento</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Memento getMemento() {</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
memento;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param memento the memento to set</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setMemento(Memento memento) {</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.memento
= memento;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>场景类</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Client{&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void main(String[] args) {</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Originator
originator=new Originator();</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Caretaker
caretaker=new Caretaker();</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>创建一个备忘录</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; caretaker.setMemento(originator.creatMemento);&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>恢复一个备忘录</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; originator.restoreMemento(caretaker.getMemento);</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:42.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>不要频繁建立备份的场景使用备忘录模式，不如在一个</span><span
lang=EN-US>for</span><span style='font-family:宋体'>循环中，原因有二：一是控制不了备忘录的对象数量，二是大对象的建立需要消耗资源，从系统的系能方面考虑。哥哥</span><span
lang=EN-US>6</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>使用场景：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>提供一个可回滚（</span><span lang=EN-US>roolback</span><span
style='font-family:宋体'>）的操作；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>需要监控的副本场景；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>数据库连接的事务管理用的就是备忘录模式；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>备忘录模式的拓展</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Clone</span><span style='font-family:宋体'>方式的备忘录――融合备忘录的发起人角色</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>融合备忘录的发起人角色</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>发起人角色</span><span lang=EN-US>Originator</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class&nbsp; Originator implements Cloneable{</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
String state=&quot;&quot;;</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@return the state</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
String getState() {</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
state;</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param state the state to set</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setState(String state) {</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.state
= state;</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Memento creatMemento() {</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
this.clone();</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void restoreMemento(Originator originator) {</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setState(originator.getState());</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Originator clone() {</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try
{</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
(Originator)super.clone();</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
catch (Exception e) {</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:42.0pt;text-indent:21.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>备忘录管理员角色</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Caretaker{</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Originator originator;</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@return the originator</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Originator getMemento() {</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
originator;</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param originator the originator to set</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setMemento(Originator originator) {</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.originator
= originator;</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Clone</span><span style='font-family:宋体'>方式的备忘录――融合备忘录的发起人和管理员角色</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>融合备忘录的发起人和管理员角色</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>发起人角色</span><span lang=EN-US>Originator</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class&nbsp; Originator implements Cloneable{</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
String state=&quot;&quot;;</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Originator backup=null;</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@return the state</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
String getState() {</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
state;</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param state the state to set</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setState(String state) {</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.state
= state;</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void creatMemento() {</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.backup=this.clone();</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void restoreMemento() {</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setState(this.backup.getState());</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Originator clone() {</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try
{</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
(Originator)super.clone();</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
catch (Exception e) {</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>//</span><span
style='font-family:宋体'>场景类</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
class Client{&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void main(String[] args) {</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Originator
originator=new Originator();</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>创建一个备忘录；</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; originator.setState(&quot;</span><span
style='font-family:宋体'>初始状态</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>创建一个备忘录备份；</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; originator.creatMemento();</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; originator.setState(&quot;</span><span
style='font-family:宋体'>更改后的状态</span><span lang=EN-US>&quot;);</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; originator.restoreMemento();</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:24.0pt'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>多备份备忘录</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>4.8<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>访问者模式</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Visitor Pattern</span><span style='font-family:
宋体'>，定义：</span><span lang=EN-US>Represent an operation to be performed on the
elements of an object structure. Visitor lets you define a new operation
without changing the classes of elements on which it operation.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>五个角色：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Visitor</span><span style='font-family:宋体'>抽象访问者</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:0cm'><span
style='font-family:宋体'>抽象类或者接口，声明访问者可以访问哪些元素，具体在元素中就是</span><span lang=EN-US>visit</span><span
style='font-family:宋体'>方法参数定义哪些对象可以被访问；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ConcreteVisitor</span><span style='font-family:
宋体'>具体访问者</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Element</span><span style='font-family:宋体'>抽象元素</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:0cm'><span
style='font-family:宋体'>抽象类或者接口，声明接受哪一类访问者的访问，具体在元素中就是</span><span lang=EN-US>accept</span><span
style='font-family:宋体'>方法参数定义；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>d)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ConcreteElement</span><span style='font-family:
宋体'>具体元素</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:0cm'><span
style='font-family:宋体'>实现</span><span lang=EN-US>accept()</span><span
style='font-family:宋体'>的方法基本上是</span><span lang=EN-US>visitor.visit(this);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>e)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ObjectStructure</span><span style='font-family:
宋体'>结构对象</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:0cm'><span
style='font-family:宋体'>用于产生不同的容器，如</span><span lang=EN-US>List</span><span
style='font-family:宋体'>、</span><span lang=EN-US>Set</span><span
style='font-family:宋体'>、</span><span lang=EN-US>Map</span><span
style='font-family:宋体'>等；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>建立自己的一套过滤器和拦截器；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="_Hlk501526450"><span lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>主要用</span></a><span
style='font-family:宋体'>来修饰报表的展现方式，不同的</span><span lang=EN-US>visitor</span><span
style='font-family:宋体'>就意味者不同的展现风格，具体代码如下：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>抽象元素</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public abstract class Element{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract void doSomething();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract void accept(Visitor vistor);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>具体元素</span><span lang=EN-US>&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public&nbsp; class ConcreteElement1
extends Element{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public&nbsp;
void doSomething() {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public&nbsp;
void accept(Visitor vistor) {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public&nbsp; class ConcreteElement2
extends Element{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public&nbsp;
void doSomething() {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public&nbsp;
void accept(Visitor vistor) {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>抽象访问者</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public interface Vistor{</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract void visit(ConcreteElement1 concreteElement1);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract void visit(ConcreteElement2 concreteElement2);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>具体访问者</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public&nbsp; class ConcreteVistor
implements Vistor {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void visit(ConcreteElement1 concreteElement1) {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; concreteElement1.doSomething();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void visit(ConcreteElement2 concreteElement2) {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; concreteElement2.doSomething();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>具体场景</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class Client{&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void main(String[] args) {</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Element
element = new ConcreteElement1();</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; element.accept(new
Visitor);</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>双分派</span><span lang=EN-US>Double
dispatch</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>单分派</span><span lang=EN-US>single dispatch</span><span
style='font-family:宋体'>，其处理一个操作是根据请求者的名称和接收到的参数决定的，在</span><span lang=EN-US>java</span><span
style='font-family:宋体'>中有静态绑定和动态绑定之说，它的实现是依据重载（</span><span lang=EN-US>overload</span><span
style='font-family:宋体'>）和覆写（</span><span lang=EN-US>override</span><span
style='font-family:宋体'>）实现的。重载在编译期跟据参数的个数和类型就决定了要调用那个方法，这是静态绑定。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>而双分派则意味着得到执行的操作决定于请求的种类和两个接收者的类型。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>符合单一职责原则。具体的元素角色也就是</span><span
lang=EN-US>Element</span><span style='font-family:宋体'>抽象类的两个子类负责数据的加载，而</span><span
lang=EN-US>Visitor</span><span style='font-family:宋体'>类则负责报表的展现，两个不同职责非常明确的分离出来。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>优秀的拓展性</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>由于职责分开，继续增加对数据的操作时非常快捷的，例如现在要增加一份给老师的报表，有要求报表的格式不一样，则直接在</span><span
lang=EN-US>visitor</span><span style='font-family:宋体'>类中增加一个方法，传递数据后整理打印。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>灵活性非常高</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>缺点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>具体原色对访问者公布细节</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>访问者要访问一个类必然要知道该类的方法和数据，也就是访问者关注了其他类的内部数据，这是迪米特法则所不允许的；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>具体元素变更困难</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>违背了依赖倒置的原则</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>访问者依赖的是具体元素，而不是抽象元素；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>使用场景：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>一个对象结构包含有很多类的对象，他们有不同的接口，而你想对这些对象进行具体的很多不一样的操作；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>业务规则需要遍历多个不同的对象（迭代器模式只能访问同类或者同接口的对象）</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>拓展：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>统计功能；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>多个访问者</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>一堆数据从不同的角度进行分析，即数据挖掘。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK2"><span
lang=EN-US>4.9<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>状态模式</span></a></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Status Pattern</span><span style='font-family:
宋体'>，定义：</span><span lang=EN-US>Allow an Object to alert its internal state
changes. The object will appear to change its class.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>三个角色：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>State</span><span style='font-family:宋体'>抽象状态角色；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>ConcreteState</span><span style='font-family:
宋体'>具体状态角色；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Context</span><span style='font-family:宋体'>环境角色，重点抓住该类去理解程序；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Context</span><span style='font-family:宋体'>是一个环境角色，放在各状态里面可以储存各状态下转换状态的信息，并调用转换动作，但是为什么不直接调用自己的动作，而通过自己间接调用具体状态角色的动作呢？我的理解是用于跟据迪米特原则，上下文知道状态转换及动作的信息越少越好，那只好调用具体状态角色的动作喽。同时，环境角色有代理的意味，代码如下：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>抽象状态角色</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public abstract class Status{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected
Context context;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setContext(Context context) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.context=context;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract void handle1();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract void handle2();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>具体状态角色</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class ConcreteStatus1 extends
Status{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void handle1() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>本状态下必须处理的逻辑</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void handle2() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>设置当前的状态为</span><span lang=EN-US>state2</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.Context.setCurrentStatus(Context.ConcreteStatus1);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>过渡到</span><span lang=EN-US>state2</span><span
style='font-family:宋体'>，由</span><span lang=EN-US>context</span><span
style='font-family:宋体'>实现</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.Context.handle2</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class ConcreteStatus2 extends
Status{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void handle1() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.context.setCurrentStatus(Context.concreteStatus2);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.context.handle2();&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void handle2() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>本状态下必须处理的逻辑</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>具体环境角色</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class Context{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>定义状态</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
final static&nbsp; ConcreteStatus1 =new&nbsp; ConcreteStatus1();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
final static&nbsp; ConcreteStatus2 =new&nbsp; ConcreteStatus2();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>当前状态</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Status currentStatus=null;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@return the currentStatus</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Status getCurrentStatus() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
currentStatus;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param currentStatus the currentStatus to set</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setCurrentStatus(Status currentStatus) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.currentStatus
= currentStatus;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void handle1(){</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.currentStatus.handle1();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void handle2(){</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.currentStatus.handle2();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>场景类</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class Client{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void main(String[] avgs) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Context
context=new Context();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>定义初始状态</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.setCurrentStatus(new
ConcreteStatus1);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.handle1;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handle1.handle2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>避免过多的使用判断语句使得程序变得过于复杂，提高系统的可维护性；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>遵循设计原则，很好地体现开闭原则和单一职责原则，每个状态都是子类，你要增加状态或者修改状态，只要增加子类或者修改子类即可；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>封装性非常好，状态的变换放置到类中实现，内部的调用不知道类内是如何</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>缺点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>类过多容易膨胀，管理是一个问题，所以类状态最好不要超过</span><span
lang=EN-US>5</span><span style='font-family:宋体'>个；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>使用场景：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>行为随状态改变的场景；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>条件和分支过多的时候；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>4.10<span
style='font:7.0pt "Times New Roman"'> </span></span><span style='font-family:
宋体'>解释器模式</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>定义：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Interpreter Pattern</span><span
style='font-family:宋体'>，一种按照规定语法进行解析的方案，在现在项目中用的比较少，定义：</span><span lang=EN-US>Given
a language, define a representation for its grammar along with an interpreter
that user the representation to interpret sentences in the language.</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>四个角色：</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>AbstractionExpression</span><span
style='font-family:宋体'>抽象解释器</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>TerminalExpression</span><span style='font-family:
宋体'>终结符表达式</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>NonterminalExpression</span><span
style='font-family:宋体'>非终结表达式</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>d)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Context</span><span style='font-family:宋体'>环境角色</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>细节：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>改进型，可迭代，可进行多项的四则运算；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>抽象表达式</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public abstract class Expression{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
abstract Object Interpreter(Context ctx);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>终结符表达式</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class TerminalExpression
extends Expression{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private
Object parameter;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@return the parameter</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Object getParameter() {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
parameter;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*
@param parameter the parameter to set</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
void setParameter(Object parameter) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.parameter
= parameter;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Object Interpreter(Context ctx) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
null;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>非终结符表达式</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class NonTerminalExpression1
extends Expression{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
NonTerminalExpression1(Expression... expressions) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
expressions</span><span style='font-family:宋体'>必须是</span><span lang=EN-US>TerminalExpression</span><span
style='font-family:宋体'>类</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Object Interpreter(Context ctx) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>调用</span><span lang=EN-US>TerminalExpression</span><span
style='font-family:宋体'>的</span><span lang=EN-US>Interpreter</span><span
style='font-family:宋体'>的方法继续逻辑运算</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
null;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class NonTerminalExpression2
extends Expression{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
NonTerminalExpression2(Expression... expressions) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
expressions</span><span style='font-family:宋体'>必须是</span><span lang=EN-US>TerminalExpression</span><span
style='font-family:宋体'>类</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
Object Interpreter(Context ctx) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>调用</span><span lang=EN-US>TerminalExpression</span><span
style='font-family:宋体'>的</span><span lang=EN-US>Interpreter</span><span
style='font-family:宋体'>的方法继续逻辑运算</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
null;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>//</span><span style='font-family:宋体'>场景类</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class Client{</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public
static void main(String[] args) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Context
ctx = new Context();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char[]
charArray=ctx.toCharArray();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>通常定义一个语法容器，来容纳一个具体的表达式</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stack&lt;Expression&gt;
stack=null;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Expression
left=new TerminalExpression();//</span><span style='font-family:宋体'>实际类型是</span><span
lang=EN-US>TerminalExpression</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Expression
right=new TerminalExpression();//</span><span style='font-family:宋体'>实际类型是</span><span
lang=EN-US>TerminalExpression</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object
newLeft=new Object();</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Expression
exp=null;//</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int
i=0;i&lt;charArray.length();i++) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(charArray[i]==&quot;NonTerminalExpression1&quot;){</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left.setParameter(stack.pop);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right.setParameter(charArray[++i]);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exp=new
NonTerminalExpression1(left,right);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stack.push(exp.Interpreter(ctx));//</span><span
style='font-family:宋体'>把每一步的结果保存下来</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else
if (charArray[i]==&quot;NonTerminalExpression2&quot;){</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left.setParameter(stack.pop);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right.setParameter(charArray[++i]);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exp=new
NonTerminalExpression2(left,right);</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stack.push(exp.Interpreter(ctx));//</span><span
style='font-family:宋体'>把每一步的结果保存下来</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else
if(charArray[i]==&quot;TerminalExpression&quot;) {</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stack.push(charArray[i])</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>优点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>可拓展语法，只要添加非终结符表达式类就可以</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>缺点：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>会引起类膨胀；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>递归的算法在调试时存在非常大的不方便；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>由于使用了大量的循环和递归，效率是个不容忽视的问题；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>最佳实践：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>其实现在有很多开源的框架实现解释器的功能，实在没有必要自己从头开始；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:21.0pt;text-indent:-21.0pt'><a name="OLE_LINK71"></a><a
name="OLE_LINK70"><span lang=EN-US>五、<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>创建类模式大<span lang=EN-US>PK</span></a></h2>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK64"></a><a
name="OLE_LINK62"><span lang=EN-US>5.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>单例模式</span></a><a name="OLE_LINK63"><span
lang=EN-US>VS</span></a><span style='font-family:宋体'>原型模式</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>其实这两个模式都不容易混淆，单例模式是用静态的方法返回内存唯一的对象，原型模式是继承</span><span
lang=EN-US>Colonable</span><span style='font-family:宋体'>的对象然后覆写</span><span
lang=EN-US>clone()</span><span style='font-family:宋体'>方法返回一个几乎一样的对象。</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK67"><span
lang=EN-US>5.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>工厂方法模式和</span></a><a
name="OLE_LINK65"><span style='font-family:宋体'>建造者模式</span></a></h3>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>工厂方法模式：注重整体对象的创建，具体生产出来的对象不必具有相同的属性和行为，<a
name="OLE_LINK66">生产产品的粒度比较大</a>；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK69"><span lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>建造者模式：注重部件构建的过程，旨在一步一步地精确创造处一个复杂的对象，拥有对象诸如</span><span
lang=EN-US>Director(</span></a><span style='font-family:宋体'>提供建造的方法，高层模块传入何种</span><span
lang=EN-US>Builder</span><span style='font-family:宋体'>就返回哪种</span><span
lang=EN-US>Product)</span><span style='font-family:宋体'>，</span><span
lang=EN-US>Builder(</span><span style='font-family:宋体'>建造方法或者建造顺序，最后返回相应的实体类</span><span
lang=EN-US>)</span><span style='font-family:宋体'>和</span><span lang=EN-US>product</span><span
style='font-family:宋体'>实体类。生产产品的粒度比较小。</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK68"><span
lang=EN-US>5.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>抽象工厂模式</span></a><span
style='font-family:宋体'>和建造者模式</span></h3>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>抽象工厂模式：实现对产品家族的创建，具有不同分类维度产品的组合。并不关心产品生产的过程或者是顺序，只关心什么产品由什么工厂生产即可；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>建造者模式：注重部件构建的过程，旨在一步一步地精确创造处一个复杂的对象，拥有对象诸如</span><span
lang=EN-US>Director(</span><span style='font-family:宋体'>提供建造的方法，高层模块传入何种</span><span
lang=EN-US>Builder</span><span style='font-family:宋体'>就返回哪种</span><span
lang=EN-US>Product)</span><span style='font-family:宋体'>，</span><span
lang=EN-US>Builder(</span><span style='font-family:宋体'>建造方法或者建造顺序，最后返回相应的实体类</span><span
lang=EN-US>)</span><span style='font-family:宋体'>和</span><span lang=EN-US>product</span><span
style='font-family:宋体'>实体类。生产产品的粒度比较小。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:21.0pt;text-indent:-21.0pt'><a name="OLE_LINK78"><span
lang=EN-US>六、<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>结构类模式大<span
lang=EN-US>PK</span></a></h2>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK75"></a><a
name="OLE_LINK72"><span lang=EN-US>6.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>代理模式</span></a><span lang=EN-US>VS</span><span
style='font-family:宋体'>装饰模式</span></h3>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>相同点：代理类和相应的<a name="OLE_LINK73">被代理类</a>都有相同的接口，代理类使用时需要传入被代理类的对象；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>代理模式：可以判断是否执行<a name="OLE_LINK74">被代理类的行为</a>，就是加上</span><span
lang=EN-US>if</span><span style='font-family:宋体'>语句进行判断，如果可执行就原汁原味地执行；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>装饰模式：在增强原来被代理类的行为，不做准入条件的判断和准入参数的过滤</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK76"><span
lang=EN-US>6.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>装饰模式</span></a><span lang=EN-US>VS</span><a
name="OLE_LINK77"><span style='font-family:宋体'>适配器模式</span></a></h3>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>装饰模式：装饰具有相同血缘关系（相同接口）的类；</span></p>

<p class=MsoListParagraph style='margin-left:42.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>适配器模式：修饰不具有血缘关系的类；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt'><span style='font-family:
宋体'>当出现子类继承父类的同时又去实现一个成员变量、方法与父类相同的接口时，重写的是父类的方法，接口的方法被隐藏。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:24.0pt'><span
style='font-family:宋体'>如果子类没有定义跟父类、接口一样的成员变量，则需要通过</span><span lang=EN-US>super</span><span
style='font-family:宋体'>关键字调用父类的成员变量，接口的成员则无法调用，而且这个时候不用</span><span lang=EN-US>super</span><span
style='font-family:宋体'>关键的话，</span><span lang=EN-US>IDE</span><span
style='font-family:宋体'>会提示使用的成员变量是</span><span lang=EN-US>ambiguous</span><span
style='font-family:宋体'>（暧昧的、混淆的），无法通过编译；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt'><span style='font-family:
宋体'>如果子类同时还定义了跟父类、接口一样的成员变量，可以直接调它本身的成员变量，能过</span><span lang=EN-US>super</span><span
style='font-family:宋体'>关键字可以调父类的成员变量，而接口的成员变量则无法调用。</span></p>

<h2 style='margin-left:21.0pt;text-indent:-21.0pt'><a name="OLE_LINK97"><span
lang=EN-US>七、<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>行为类模式大<span
lang=EN-US>PK</span></a></h2>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK80"></a><a
name="OLE_LINK79"><span lang=EN-US>7.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>命令模式和策略模式</span></a></h3>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>命令模式：多了一个接收者</span><span lang=EN-US>(Receiver)</span><span
style='font-family:宋体'>角色，侧重对动作的解耦，把一个动作的行为分为执行对象（接收者角色），执行行为（命令角色）。调用者调用命令类让接收者干活，命令类在高层模块中通过参数传入调用者，接收者则在命令类的抽象类中已经被传入，可以参考数据库中的业务类，如业务提交和业务撤销；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK81"><span lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>策略模式：封装算法，本身每个算法就是一个原子业务，算法独立可以相互替换，让行为的变化独立于拥有行为的客户，使用哪种算法由高层模块决定；</span></a></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK83"><span
lang=EN-US>7.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>策略模式和</span></a><a name="OLE_LINK82"><span
style='font-family:宋体'>状态模式</span></a></h3>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>策略模式：封装算法，本身每个算法就是一个原子业务，算法独立可以相互替换，让行为的变化独立于拥有行为的客户，使用哪种算法由高层模块决定。环境角色主要用于在高层模块中传入参数（对象）进行切换算法；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>状态模式：关注的是状态按照指定的顺序进行无缝切换，旨在解决内部状态改变而引起的行为改变，它的出发点需要初始化。环境角色用于保存切换的状态。通常命令模式用于代替复杂的判断语句，虽然容易拓展，但是一般不会进行大规模的扩张和修正。</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK85"><span
lang=EN-US>7.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>观察者模式</span></a><span
style='font-family:宋体'>和<a name="OLE_LINK84">责任链模式</a></span></h3>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>观察者模式</span> <span style='font-family:宋体'>消息是属于触发传递的，类似于蝴蝶效应，传递的对象可以被改变</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>责任链模式</span> <span style='font-family:宋体'>在高层模块中声明责任链的顺序，在每种情况中添加判断，如果能执行则执行，不能执行则跳转到下一级执行。链中不会改变消息对象的结构。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:21.0pt;text-indent:-21.0pt'><span lang=EN-US>八、<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>跨区域<span
lang=EN-US>PK</span></h2>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>8<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>8.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>策略模式</span><span lang=EN-US>VS</span><span
style='font-family:宋体'>桥梁模式</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

</div>

</body>

</html>
