<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"等线 Light";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@等线 Light";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
h1
	{mso-style-link:"标题 1 字符";
	margin-top:17.0pt;
	margin-right:0cm;
	margin-bottom:16.5pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:240%;
	page-break-after:avoid;
	font-size:22.0pt;
	font-family:"Times New Roman",serif;}
h2
	{mso-style-link:"标题 2 字符";
	margin-top:13.0pt;
	margin-right:0cm;
	margin-bottom:13.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:173%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"等线 Light";}
h3
	{mso-style-link:"标题 3 字符";
	margin-top:13.0pt;
	margin-right:0cm;
	margin-bottom:13.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:173%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Times New Roman",serif;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"页眉 字符";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:center;
	layout-grid-mode:char;
	border:none;
	padding:0cm;
	font-size:9.0pt;
	font-family:"Times New Roman",serif;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"页脚 字符";
	margin:0cm;
	margin-bottom:.0001pt;
	layout-grid-mode:char;
	font-size:9.0pt;
	font-family:"Times New Roman",serif;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"批注框文本 字符";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:9.0pt;
	font-family:"Times New Roman",serif;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
span.1
	{mso-style-name:"标题 1 字符";
	mso-style-link:"标题 1";
	font-family:"Times New Roman",serif;
	font-weight:bold;}
span.2
	{mso-style-name:"标题 2 字符";
	mso-style-link:"标题 2";
	font-family:"等线 Light";
	font-weight:bold;}
span.3
	{mso-style-name:"标题 3 字符";
	mso-style-link:"标题 3";
	font-family:"Times New Roman",serif;
	font-weight:bold;}
span.a
	{mso-style-name:"页眉 字符";
	mso-style-link:页眉;
	font-family:"Times New Roman",serif;}
span.a0
	{mso-style-name:"页脚 字符";
	mso-style-link:页脚;
	font-family:"Times New Roman",serif;}
span.a1
	{mso-style-name:"批注框文本 字符";
	mso-style-link:批注框文本;
	font-family:"Times New Roman",serif;}
.MsoChpDefault
	{font-family:等线;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	layout-grid:16.3pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=ZH-CN style='text-justify-trim:punctuation'>

<div class=WordSection1 style='layout-grid:16.3pt'>

<h1><a name="OLE_LINK1"><span lang=EN-US>Java</span></a><span style='font-family:
宋体'>反射技术栈</span></h1>

<p class=MsoNormal style='text-indent:24.0pt'><span style='font-family:宋体'>类似与现实生活中的</span><span
lang=EN-US>X</span><span style='font-family:宋体'>射线，看透所有。如果</span><span
lang=EN-US>Java</span><span style='font-family:宋体'>没有反射机制，则星空则会暗淡无光，也是</span><span
lang=EN-US>IDE</span><span style='font-family:宋体'>提示功能的重要支持，还有</span><span
lang=EN-US>servlet</span><span style='font-family:宋体'>里面配置文件中</span><span
lang=EN-US>class</span><span style='font-family:宋体'>标签，用来动态生成一个类的对象，用到的也是反射的机制。</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:21.0pt;text-indent:-21.0pt'><span lang=EN-US>一、<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>反射的概念</h2>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>1.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>反射是什么</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>反射就是在程序运行过程中，动态创建对象。只要知道该类的类名称，就可以使用他的字节码对象创建该类的一个对象。对于该类中的任何一个对象或者属性，我们都可以访问和使用它，</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>1.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>字节码文件</span></h3>

<p class=MsoNormal><span lang=EN-US>.class</span></p>

<p class=MsoNormal><span lang=EN-US>.java </span><span lang=EN-US
style='font-family:Wingdings'>à</span><span lang=EN-US>.class </span><span
lang=EN-US style='font-family:Wingdings'>à</span><span lang=EN-US> jvm Class</span><span
style='font-family:宋体'>对象</span></p>

<p class=MsoNormal><span lang=EN-US>Class</span><span style='font-family:宋体'>对象加载到内存的时机，而且只会加载一次：</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>new</span><span style='font-family:宋体'>一个对象时，也是通过字节码文件创建的，然后加载到内存；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>new</span><span style='font-family:宋体'>一个父类的子类对象时，把父类的字节码文件加载到内存；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>使用一个类的静态成员时</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Java</span><span style='font-family:宋体'>命令执行一个字节码对象的实现；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>5)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>用反射的时候</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>1.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体'>获得字节码对象的三种方式</span></h3>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>通过</span><span lang=EN-US>Object</span><span
style='font-family:宋体'>类的</span><span lang=EN-US>“</span><span
style='font-family:宋体'>实例</span><span lang=EN-US>.getClass”</span><span
style='font-family:宋体'>方法，获得类的全路径；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>通过</span><span lang=EN-US>“</span><span
style='font-family:宋体'>类型</span><span lang=EN-US>.class”</span><span
style='font-family:宋体'>，获得类的全路径；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>通过</span><span lang=EN-US>Class</span><span
style='font-family:宋体'>类的静态方法</span><span lang=EN-US>forName(“</span><span
style='font-family:宋体'>类的全路径</span><span lang=EN-US>”)</span><span
style='font-family:宋体'>；</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK23"><span
lang=EN-US>1.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>字节码对象</span></a></h3>

<p class=MsoNormal><span style='font-family:宋体'>类里面有什么东西，字节码就有什么东西。</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>成员变量</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>Field</span><span style='font-family:宋体'>对象</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>成员方法</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>Method</span><span style='font-family:宋体'>对象</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>构造方法</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>Constructor</span><span style='font-family:宋体'>对象</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<h2 style='margin-left:21.0pt;text-indent:-21.0pt'><span lang=EN-US>二、<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>字节码对象的详解</h2>

<p class=MsoListParagraph style='margin-top:13.0pt;margin-right:0cm;margin-bottom:
13.0pt;margin-left:21.25pt;text-indent:-21.25pt;line-height:173%;page-break-after:
avoid;display:none'><b><span lang=EN-US style='font-size:16.0pt;line-height:
173%;display:none'>2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=EN-US style='font-size:16.0pt;line-height:173%;
display:none'>&nbsp;</span></b></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK26"><span
lang=EN-US>2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Constuctor</span></a><span style='font-family:
宋体'>对象</span></h3>

<p class=MsoNormal><span style='font-family:宋体'>创建一个对象的方法</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>new</span><span style='font-family:宋体'>调用的是</span><span
lang=EN-US>public</span><span style='font-family:宋体'>的构造方法，可以调用<a
name="OLE_LINK10"></a><a name="OLE_LINK11">无参</a>或者是<a name="OLE_LINK12">有</a><a
name="OLE_LINK9">参</a>的构造方法；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>利用</span><span lang=EN-US>.newInstance()</span><span
style='font-family:宋体'>方法创建一个实例，底层是调用有参的构造方法；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>通过构造方法对象创建一个类的实例</span><a
name="OLE_LINK2"><span lang=EN-US>Constructor</span></a></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>应用实例</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>获得单个公共方法</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><a
name="OLE_LINK16"></a><a name="OLE_LINK6"><span lang=EN-US>Constructor </span></a><a
name="OLE_LINK8"></a><a name="OLE_LINK7"><span lang=EN-US>constructor</span></a><span
lang=EN-US>=</span><span style='font-family:宋体'>类的</span><span lang=EN-US>class</span><span
style='font-family:宋体'>对象</span><span lang=EN-US>.getConstructor(</span><span
style='font-family:宋体'>参数的</span><span lang=EN-US>Class</span><span
style='font-family:宋体'>对象</span><span lang=EN-US>)</span><span
style='font-family:宋体'>；</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
style='font-family:宋体'>类名</span> <span lang=EN-US>clazz =</span><span
style='font-family:宋体'>（类名）</span><span lang=EN-US>constructor. newInstance(</span><span
style='font-family:宋体'>参数</span><span lang=EN-US>)</span><span
style='font-family:宋体'>；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>获得单个方法</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:宋体'>上述方法只能获得一个公共构造方法，若要获得私有的构造方法，需要使用增强方法</span><a
name="OLE_LINK14"><span lang=EN-US>getDeclareConstructor</span></a><span
lang=EN-US>()</span><span style='font-family:宋体'>方法，只要声明了就能找到：</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>Constructor <a name="OLE_LINK15">constructor</a>=</span><span
style='font-family:宋体'>类的</span><span lang=EN-US>class</span><span
style='font-family:宋体'>对象</span><span lang=EN-US>. <a name="OLE_LINK21">get</a><a
name="OLE_LINK22">Declare</a>Constructor (</span><span style='font-family:宋体'>参数的</span><span
lang=EN-US>Class</span><span style='font-family:宋体'>对象</span><span lang=EN-US>)</span><span
style='font-family:宋体'>；</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><a
name="OLE_LINK25"></a><a name="OLE_LINK24"><span lang=EN-US>constructor.setAccessible(true);</span></a><span
lang=EN-US> //</span><span style='font-family:宋体'>暴力访问；</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
style='font-family:宋体'>类名</span> <span lang=EN-US>clazz =</span><span
style='font-family:宋体'>（类名）</span><span lang=EN-US>constructor. newInstance(</span><span
style='font-family:宋体'>参数</span><span lang=EN-US>)</span><span
style='font-family:宋体'>；</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>3)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>获得所有公共方法</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><a
name="OLE_LINK17"><span lang=EN-US>Constructor</span></a><a name="OLE_LINK18"><span
lang=EN-US>[] constructor</span></a><span lang=EN-US>s=</span><span
style='font-family:宋体'>类的</span><span lang=EN-US>class</span><span
style='font-family:宋体'>对象</span><span lang=EN-US>.getConstructors()</span><span
style='font-family:宋体'>；</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>for(Constructor <a name="OLE_LINK19">constructor</a>: constructors){</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp; System.out.println(constructor);</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>}</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>4)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>获得所有方法</span><a name="OLE_LINK13"></a></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>Constructor[] constructors=</span><span style='font-family:宋体'>类的</span><span
lang=EN-US>class</span><span style='font-family:宋体'>对象</span><span lang=EN-US>.getDeclareConstructors()</span><span
style='font-family:宋体'>；</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>for(Constructor constructor: constructors){</span></p>

<p class=MsoListParagraph style='margin-left:54.0pt;text-indent:0cm'><span
lang=EN-US>constructor.setAccessible(true);</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp; System.out.println(constructor);</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>}</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><a name="OLE_LINK32"><span
lang=EN-US>2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>Field</span></a><span style='font-family:宋体'>对象</span></h3>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><a
name="OLE_LINK33"><span lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>获得所有公共成员变量：</span></a></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><a
name="OLE_LINK28"><span lang=EN-US>Class clazz = Class.forName(“com.lvhongbin.bean.User”);</span></a></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>Field[] fields=clazz.getFileds();</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>For(Filed <a name="OLE_LINK27">field</a>: fields){</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp; System.out.println(field);</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>获得单个成员变量（不管是私有的或者是共有的）</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:12.0pt'><span
lang=EN-US>Class clazz = Class.forName(“com.lvhongbin.bean.User”);</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
style='font-family:宋体'>类名</span> <a name="OLE_LINK31"><span lang=EN-US>obj</span></a><span
lang=EN-US> =</span><span style='font-family:宋体'>（类名）</span><span lang=EN-US>clazz.
newInstance(</span><span style='font-family:宋体'>参数</span><span lang=EN-US>)</span><span
style='font-family:宋体'>；</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>Field <a name="OLE_LINK29">field</a>=clazz.getDeclareFiled(“</span><span
style='font-family:宋体'>成员变量名称</span><span lang=EN-US>”);</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>field.setAccessible(true);</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>System.out.println(field);</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>//</span><span style='font-family:宋体'>给</span><span lang=EN-US>field</span><span
style='font-family:宋体'>赋值</span></p>

<p class=MsoListParagraph style='margin-left:33.0pt;text-indent:0cm'><span
lang=EN-US>field.set(obj, </span><span style='font-family:宋体'>值</span><span
lang=EN-US>)</span><span style='font-family:宋体'>；</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:49.6pt;text-indent:-1.0cm'><span lang=EN-US>2.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-US>Method</span><span style='font-family:宋体'>对象</span></h3>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>获得单个成员变量（不管是私有的或者是共有的）</span></p>

<p class=MsoListParagraph style='margin-left:33.25pt;text-indent:0cm'><span
lang=EN-US>Class clazz = Class.forName(“com.lvhongbin.bean.User”);</span></p>

<p class=MsoListParagraph style='margin-left:33.25pt;text-indent:0cm'><span
style='font-family:宋体'>类名</span> <span lang=EN-US>obj =</span><span
style='font-family:宋体'>（类名）</span><span lang=EN-US>clazz. newInstance(</span><span
style='font-family:宋体'>参数</span><span lang=EN-US>)</span><span
style='font-family:宋体'>；</span></p>

<p class=MsoListParagraph style='margin-left:33.25pt;text-indent:0cm'><a
name="OLE_LINK35"></a><a name="OLE_LINK34"><span lang=EN-US>Method</span></a><span
lang=EN-US> <a name="OLE_LINK36">method</a> =clazz.getDeclareMethod (“</span><span
style='font-family:宋体'>成员方法名称</span><span lang=EN-US>”</span><span
style='font-family:宋体'>，参数的类对象</span><span lang=EN-US>);</span></p>

<p class=MsoListParagraph style='margin-left:33.25pt;text-indent:0cm'><span
lang=EN-US>method.setAccessible(true);</span></p>

<p class=MsoListParagraph style='margin-left:33.25pt;text-indent:0cm'><span
lang=EN-US>System.out.println(method);</span></p>

<p class=MsoListParagraph style='margin-left:33.25pt;text-indent:0cm'><span
lang=EN-US>// </span><span style='font-family:宋体'>执行</span><span lang=EN-US>method</span><span
style='font-family:宋体'>方法</span></p>

<p class=MsoListParagraph style='margin-left:33.25pt;text-indent:0cm'><span
lang=EN-US>field.invoke (obj, </span><span style='font-family:宋体'>参数值</span><span
lang=EN-US>)</span><span style='font-family:宋体'>；</span></p>

<p class=MsoListParagraph style='margin-left:21.25pt;text-indent:0cm'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoListParagraph style='margin-left:21.0pt;text-indent:-21.0pt'><span
lang=EN-US>2)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体'>获得所有公共成员变量：</span></p>

<p class=MsoListParagraph style='margin-left:33.25pt;text-indent:0cm'><span
lang=EN-US>Class clazz = Class.forName(“com.lvhongbin.bean.User”);</span></p>

<p class=MsoListParagraph style='margin-left:33.25pt;text-indent:0cm'><span
lang=EN-US>Field[] fields=clazz.getFileds();</span></p>

<p class=MsoListParagraph style='margin-left:33.25pt;text-indent:0cm'><span
lang=EN-US>For(Filed field: fields){</span></p>

<p class=MsoListParagraph style='margin-left:33.25pt;text-indent:0cm'><span
lang=EN-US>&nbsp;&nbsp; System.out.println(field);</span></p>

<p class=MsoListParagraph style='margin-left:33.25pt;text-indent:0cm'><span
lang=EN-US>}</span></p>

</div>

</body>

</html>
